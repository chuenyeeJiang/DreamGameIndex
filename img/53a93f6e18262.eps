%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 81-1013tm-cart-backgrounds.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Apple Computer
%%CreationDate: 1/13/14
%%BoundingBox: 0 0 693 616
%%HiResBoundingBox: 0 0 692.9825 615.9874
%%CropBox: 0 0 692.9825 615.9874
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 116 8%%BeginData: 31318 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45CFCFCFC9CFCFCFCAFFCFCFC9CFCECFCACFCFCFCACFCFCFCAFFC9CF%C9CFCECFCACFCFCFCACFCFCFCAFFC9CFC9CFCECFCACFCFCFCAFD05CFC8C8%C8CEC8C8C8CEC8C8C8CEFD04C8C9CFC9CFCFCFC9CFCFCFCAFD05CFC9CFC9%CFCECFCACFCFCFCAFD05CFC8C8C8CEC8C8C8CEC8C8C8CEC8C8C8CEC9CFC9%FD04CFC8CFC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8CEC9CEC9CEC9CEC9CFC9CEC9CFC9%CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8%C9C8C8C8CEC9CEC9CEC9CFC9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CF%C9CEC9CFC9CFC9CEC9CEC9CEC9CEC9CFC9CEC9CFC9CFC9CEC9CEC9CEC9CE%C9CEC9CEC9CFC9CFC8C9C8C9C8CEC8C9C8CEC8C9C8CEC8C8C8CEC9CEC9CE%C9CEC9CFC9CEC9CFC9CFC8CEC9CEC9CEC9CEC9CFC9CFC9CFC9CEC8CEC8C9%C8CEC8C9C8CEC8C9C8CEC8C8C9CFC9CFC9CFCFC8C9C9CEC9CEC9CFC9CFC9%CEC9C9C9CEC9C9C8FD04C9CEC9CEC8C9C9C9C8C9C9C9C8C9C9C9C8C9C9C9%C8C9C8C9C8C9C8C9C8FD04C9CEC9C9C8C9C8C9C8C9C8C8C8C9C8C9C8C9C8%C9C8FD04C9CEC9C9C9CEC9C9C9CFC9C9C8C9C9C9C8CEFD0BC8C9C8C9C8C9%C8C9C8C9C8C9C8C9C7C8C1FD04C8C9CECFFD0FFFCFCFC9CFC9CFC9CFC9CF%CFCFC9CFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFCFCFC9CFCFCFC9CFC9CFC9CFC9CFC9CFCFCFC9CFCFCFC9CFC9CFC9CF%C9CFC9CFCFCFC9CFCFCFC8CEC8C9C8CEC8C9C8CEC8CEC8CEC8CEC8CEC8CE%C8CEC8C9C8CEC8C9C8CEC8C9CFFD0FFFCFC9CFC9CEC9CEC9CEC9CEC9CEC9%CECACFC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CEC9CEC9CEC9%CEC9CECAC9C9CFC9CEC9CFC9CEC9CEC9CEC9CFC9C9C9CFC9CEC9CEC9CEC9%CEC9CEC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8%C9C8C9C8C9C8C8CECFFD0FFFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CE%C8C9C8C8CFFD0FFFCFC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CFC9CEC9CEC9%CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC8C8C8%C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C8CE%CFFD0FFFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC8CEC8CEC8CE%C8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8C8CFFD0FFF%CFC8C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9%CEFD05C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9%CEFD05C9CEC9CEC9CEC9CEC9CEC9CEC8C8C8C9C8C9C8C9C8C9C8C9C8C9C8%C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C8CECFFD0FFFCACEC9CEC9CEC9CE%C9CEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CEC9CE%C9CEC9CEC9CEC9CFC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CFC9CEC9CE%C9CEC9CEC9CEC9CEC9CFC9CEC8CEC8C9C8CEC8C8C8CEC8C9C8CEC8C9C8CE%C8C9C8CEC8C9C8CEC8C9C8CEC8FD16FFCFFFFFCFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFCACEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACEC9CFC9CFC9CFC9CF%C9CFCACFC9CFCAC9C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9C9C9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C8FD19FFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCEC8CEC8CEC8%CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8FD19FFCFC9CFC9CEC9CFC9CE%C9CFC9CEC9CECACEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CF%C9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CE%C9CFC9CEC9CFC9CEC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C9C8C8FD19FFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC8C9C8%CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8FD19FFCFC9CEC9CEC9CE%C9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CE%C9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CE%C9CEC9CEC9CEC9CEC9CEC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C9C8C9C8C8FD19FFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC8%CEC8CEC9CEC8CEC9CEC8CEC9CEC8CEC9CEC8CEC9CEC8CFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFCFC8C9C8C9C8C9C8CEC9C9C9CEC9%C9C9CEC8C9C8C9C8C9C8CEC9C9C9CEFD04C9C8C9C8C9C9C9C8CEC8C9C8CE%FD04C9C8C9C8C9C8C9C8CEC9C9C9CEFD04C9C8C9C8C9C8C9C8CEC9C9C9CE%C9CEFD18C8CFCACFCFCFCACFCFCFCACFCFCFCACFCFCFC9CFCFCFCACFCFCF%CACFCFCFCACFCFCFC9CFC9CFC9CFCFCFCACFCFCFCACFCFCFC9CFC9CFC9CF%CFCFC9CFCFCFCACFCFCFFD10C8C9CFC9CFC9CFC9CFC9CFCFCFC9CFCFCFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CEC9CEC9CFC9CFC9CFC9CFC9CFC9%C9CEC9CEC9C9C9CEC9C9C9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CE%C9CECAC9C9CEC9CEC9CEC9CEC9CEC9CEC9CECAC9C9CEC9CEC9CEC9CEC9CE%C9CEC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C9CEC9CEC9CEC9CE%C9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CF%C9CEC9CFC9CEC9CFCFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8C8C9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCF%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFC9CEC9CFC9CEC9CFC9CEC9CFC9CE%C9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CF%C9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C8C8C9C8C9C8C9C8C9%C8C9C8C9C8C9C8C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CF%C9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFCFC9CEC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8%C9C8CEC8C9C8CEC8C9C8CEC8C9C8C8C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CEC9C9CEC8CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CE%C9CEC9CEC9C9C9CEC9CFC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CE%C9CEC9CEC9CEC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C1C9C9CEC9CEC9CE%C9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CF%C9CEC9CEC9CEC9CEC9CFCEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9%CEC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CFC9%CEC9CEC9CEC9CEC9CEC9CFC9CEC9CFC8C8C8CEC8C8C8CEC8C9C8CEC8C9C8%C8C8CEC9CEC9CEC9CFC9CEC9CFC9CFC9CFC8CEC9CEC9CEC9CFC9CEC9CFC9%CFC9CEC8CEC9CEC9CEC9CEC9CEC9CFC9CEC9C9CFC9CEC9CFC9CFC9CEC9CE%C9CFC9CEC9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CE%C9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CFC9CEC9C9C9CEFD07%C9CEC9C9C9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CE%C9CEC9CFC9CFC9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CFCEC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFC9CFC9CFCF%C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CE%C9CEC9CEC9CEC9CEC9CECAC9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CE%C9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9%C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CF%C9C9C9CEC9CEC9CFCEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFCECFC9CFC9CFC9CFCFC9CEC9CFC9CEC9CEC9CEC9CFC9CE%C9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CECAC9C9CF%C9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9%C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CF%C9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFCEC9CFC9CFC9%CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9%CEC9C8FD04C9CEC9C9C9CEC8C9C8CEC9C9C9CEC9C9C9CEFD04C9C8C9C8CE%C9C9C9CEC9C9C9CEFD04C9C8C9C8CEC9C9C9CEC9C9C9CEFD04C9C8C9C9CE%C9C9C9CEC9C9C9CEFD04C9C8C9C9CEC9C9C9CEC9C9C9CEFD04C9C8C9C9CE%C9C9C9CEC9C9C9CEC9CEC9C9C8C9C9CEC9C9C9CEC9C9C9CEC9CEC8FD04C9%CEC9CECEC9CEC9CEC9CEC9CFC9CEC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CE%C9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CEC9CFC9CFC9CF%C9CEC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CEC9CFC9CF%C9CFC9CFC9CEC9CFC9CFC9C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFCACEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCA%CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACEC9CFC9CFC9CFC9CFC9CFC9CFC9%CFCACEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCEC9CEC9CFC9CFC9CFC9CF%C9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CEC9CFC9CFC9CF%C9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CEC9CFCACFC9CFC9CFC9CFC9CFC9CFC9CEC9CFCFC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9%CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9%CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9%CEC9CEC9CFCEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCECFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFCFC9CEC8CFC9CEC9CFC9CEC9CFC9CEC9CEC9%C9C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9%CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9%CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9%CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFCEC9CEC9CFC9CEC9CF%C9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CE%C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC8CEC9CF%C9CEC9CFC9CEC9CFC9CEC9CFC8CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC8CF%C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CFC9CFC9CEC9CFC9CEC9CFC9CEC9C8%CFC8C9C8C9C8C9C9C9C8C9C9CEC9C9C9CEC8C9C8C9C8C9C8FD04C9CEC9C9%C9CEC8C9C8C9C8C9C8FD04C9CEFD04C9C8C9C8C9C8C9C8FD04C9CEFD04C9%C8C9C8C9C8C9C8FD04C9CEFD04C9C8C9C8C9C8C9C8FD04C9CEFD04C9C8C9%C8C9C9C9C8FD04C9CEC9CEC9C9C8C9C8C9C9C9C8FD04C9CEC9CECFCECFC9%CFCFCFCACFCFCFC9CFC9CFCACFCFCFCACFCFCFCAFFC9CFC9CFCFCFCACFCF%CFCAFD04CFFFC9CFC9CFCFCFCACFCFCFCAFD05CFC9CFC9CFCFCFCACFCFCF%CAFD05CFC9CFC9CFCFCFCACFCFCFCAFD05CFC9CFC9CFCFCFCAFD09CFC9CF%C9CFCFCFCAFD09CFC9CFC9FD04CFC9CFC9CEC9CEC9CEC9CFC9CEC9CEC9CE%C9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CE%C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CE%C9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CE%C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CFCEC9CFC9CFC9CFC9%CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCEC9CFC9CFC9CFCF%C9CEC9CEC9CEC9CEC9CEC8CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CE%C9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CE%C9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9%C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CF%C9C9C9CEC9CEC9CFCEC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFCECEC9CFC9CFC9CFCFC8CEC9CFC9CEC9CFC9CEC8CFC9CE%C9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CF%C9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9%C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CF%C9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFCEC8C9C8CEC9%CEC9CEC9C9C8CEC8CEC8CEC9CEC9CEC9CEC9CFC9C9C8CEC8CEC8CEC9CEC9%CEC9CEC9CFC9C9C8CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC8CEC9CEC9CEC9%CEC9CEC9CEC9CFC8CEC8CEC9CEC9CEC9CEC9CEC9CEC9CFC8CEC8CEC9CEC9%CEC9CEC9CEC9CEC9CFC8CEC8CEC9CEC9CEC9CEC9CEC9CEC9CEC8CEC9CEC9%CEC9C9C9C7FD1DC8C7C9C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFCFC9C8C8CEC8CEC8CEC8CEC8CEC8CEC8%CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFCACFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFC9CEC8C9C8C9C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C9CEC9CF%C9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CE%C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CE%C9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CEC9CFC9CEC9CEC9CF%CEFD04C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CE%C8C9C8CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFCFC9C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8%C9C8C9C8C9C8C9C8C9C8C8C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9%CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9%C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFCEC9CEC9CEC8CEC9CEC8CEC8CEC8CE%C8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC9C9C8CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFC9C9C1FD08C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C8C8CEC9C9C9CEC9C9%C9CEC9C9C9CEC9C9C8CEC8C9C8CEC9C9C9CEC9C9C9CEC9C9C8CEC8C9C8CE%C9C9C9CEC9C9C9CEC9C9C8CEC8C9C9CEC9C9C9CEC9CEC9CFC9C9C8CEC9C9%C9CEC9C9C9CEC9C9C9CFC9C8C8C9C8C9C8CEC9C9C9CEC9C9C9CFCFC9CEC9%CEC9CEC9CFC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEFD%08C8C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEFD07C8C9FD07C8C9C9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9C9CFC9CFC9CFC9CECA%CEC8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8%C9C8C9C9CEC9CFC9CEC9CFC9CEC9CFC9CECACEC9CEC9CFC9CEC9CFC9CEC9%CFC9CFC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9FD04C8C9C8C8C8C9C8C9%C8C9C8C8C8CFC9CEC9CFC9CEC9CFC9CFC9CFC9CFC9CEC9CEC9CFC9CFCEC9%CFC9CFC9CFC9CFC9C9C8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8%CEC9CEC8CEC9CEC8CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8CEC8%CEC9CEC8CEC9CEC8CEC9CEC8CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFCAC8CFC9CEC9CFC9CEC9CEC8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C9CEC9CFC9CEC9CFC9CEC9CF%C9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CE%C9CFC9CFC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C8C8CEC9CEC9CFC9CEC9CF%C9CEC9CFC9CFC9CEC9CEC9CFC9CFCEC9CFC9CFC9CFC9CFC9C9C8C9C8CEC8%C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CEC8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C8C9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9C8CEC9CEC9CEC9CE%C9C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C9C8C8C9CFC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CFC9CEC9CEC9CEC9CE%C9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C8C8C9C8C9C8C9C8C9%C8C9C8C9C8C9C8C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CF%C9C9CEC9CEC9CFC9CFC8C8C8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8%CEC8C9C8CEC8C9C8CEC8C8C8CEC9CEC9CEC9CEC9CFC9CFC9CFC9CFC8CEC9%CEC9CFC9CFC9CFC9CEC9CFC9CFC8CEC9CEC9CEC9CEC9CFC9CFC9CFC9CEC8%CEC8C9C8CEC8C9C8CEC8C9C8CEC8C8C8CEC9CEC9CEC9CEC9CFC9CFC9CFC9%CEC8CEC9CEC9CFFD04C9CEC9C9C9CFC9CEC8CEC9C9C9CEC9C9C8CEC8C9C8%CEC9C9C8CEC9C9C9CEC9C9C8CEC8C9C8CEC9C9C9CEC9CEC9CFC9FD09C8C7%FD06C8C9C9CEC9CEC9CFC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CFC9C9C8CE%C9C9C9CEC8C9C8CEC8C9C8CEC9C9C9CEC9CEC9CFC9C9C9CEC9CEC9CFC9C9%C9CFC9CEC9CFCFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9FFC9CFC9CFC9CFC9%CFCACFC9CFCFCFC9FFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFC8C8C8C9C8%C9C8C9C8C9C8C9C8C9C8C8C9CFC9CFC9CFC9CFC9CFC9CFCFCFCACFC9CFC9%CFC9CFC9CFCFCFC9CFCFCFCACFC9CFC9CFC9CFC9CFC9CFC9CFCFCFCACFC9%CFC9CFC9CFC9CFC9CFC9CFCACFCAC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9C9%C9CEC9CEC9CEC9CEC9CEC9C9C9CEC9C9C9CEC9CEC9CEC9CEC9CEC9C9C9CE%FD04C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C9CEC9CEC9CEC9CEC9C9C9%CEC9CEC9C9C9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%C9C9CEC9CFC9CEC9CEC9CEC9C9C9CEC9C9C9CEC9CFCFC9CEC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8C8C9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCAC9%CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9%CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9C9C8C9C8C9C8C9C8C9C8C9C8%C9C8C9C8C9C9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9%CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CEC9%CFC9CEC9CFC9CFCEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8CEC8C9%C8CEC8C9C8CEC8C9C8CEC8C8C8CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CE%C9CFC9CFC9CFC9CFC9CFC9CFC9CFCAC9C9C8CEC9C9C9CEC9C9C9CEC9C9C9%CEC9C9C8CEC9C9C9CEC9C9C9CEC9C9C9CEC9C9C8CEC9C9C9CEC9C9C9CEC9%C9C9CEC9C8C8C9C8C8C8C9C8C8C8C9C8C8C8C9C8C8C9CEC9C9C9CEC9C9C9%CEC9C9C9CEC9C8C9CEC9C9C9CEC9C9C9CEC9C9C9CEC9C9C9CEC9C9C9CEC9%C9C9CEC9C9C9CEC9C9C9CEC9C9C9CEC9CEC9CFC9CEC9CFCEC9CEC9CEC9CE%C9CEC9CEC9CEC9CFC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CFC9CEC9CE%C9CEC9CEC9CEC9CEC9CFC9CFC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8C9C8CE%C9CEC9CEC9CEC9CEC9CEC9CFC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CF%C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CFC8CEC9CEC9CEC9CEC8CEC8C9C8CE%C9C9CFC9CFC9CFC9CFCACFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFCACFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACEC9%CFC9CEC9CFC9CFC9CFC9CFC9CFCACEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCA%CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFCACEC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9FD07C8CEC9CFC9CFC9CEC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CEC9CF%C9CEC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CEC9CEC8C9C8CEC9C9C8C8CFC9CEC9CEC9C9C9CFC9CEC9CEC9CEC9%CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9%CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9CFC8C8C8C9C8C9C8C8CEC9CFC9CFC9CFC9CF%C9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC8CEC8CEC8CEC8C8%CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9%CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9%CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9%CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC8%C8C8C9C8C9C8C8C9C9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC8CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFCFCEC8CEC8C9C8CEC8C8C9C8FD04C9CEC9C9C8C9C8C9C8C9%C8C9C9CEC9C9C9CEC9C9C8C9C8C9C8C9C8C9C9CEC9C9C9CEC9C9C8C9C8C9%C8FD04C9CEC9C9C9CEC9C9C8C9C8C9C8FD04C9CEC9C9C9CEC9C9C8C9C8C9%C8FD04C9CEC9C9C9CEC9C9C8C9C8C9C8FD04C9CEC9C9C9CEC9C9C8C9C9C9%C8C9C8C9C8C9C8C9C8CEC8C8C8C9C8C9C8C8CFC9CFC9CFC9CFCECFCACFCF%CFCACFCFCFC9CFC9CFC9CFCFCFCACFCFCFCACFCFCFC9CFC9CFC9CFCFCFCA%CFCFCFCACFCFCFC9CFC9CFC9CFCFCFCACFCFCFCACFCFCFC9CFC9CFC9CFCF%CFCACFCFCFCACFCFCFC9CFC9CFC9CFCFCFCACFCFCFCACFCFCFC9CFC9CFC9%CFCFCFCACFCFCFCACFCFCEC8C9C8C8C8C9C8C8C8CEC8CEC8CEC8C9CEC9CF%C9CEC9CEC9CEC9CFC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CFC9CEC9CECACE%C9CEC9CEC9CEC9CEC9CFC9CEC9CECACEC9CEC9CEC9CEC9CEC9CFC9CEC9CF%CACEC9CEC9CEC9CEC9CEC9CFC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CFC9CE%C9CFCAC9C9CEC9CEC9CEC9CEC9CFC9CEC9CFC9C8C8C9C8C9C8C9C8C9C8C9%C8C9C8C8CEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC8C9C8%CEC8C9C8CEC8C9C8CEC8C9C8C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CE%C9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9%C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CE%C9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CE%C9CEC9CFC8C8C8C9C8C9C8C9C8C9C8C9C8C9C8C8CEC9CEC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8C8CE%C9CFC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CE%C9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CF%C9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9C9C9CEC9CFC9CEC9CFC9CE%C9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC8C8C8C9C8C9C8C9C8C9%C8C9C8C9C8C8CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CFC9CEC9CEC9CEC9%CEC9CEC9CEC9CFC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CFC9CEC9CEC9%CEC9CEC9CFC9CEC9CFC9CFC8CEC9CEC9CEC9CEC9CFC9CEC9CFC9CFC8CEC9%CEC9CEC9CEC9CEC9CEC9CFC9CFC8CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C8%C9C8C8C8C9C8C8C8C9C8C8C8C9C8C9CEC9CEC9CFC9CFC9CEC9CEC9CEC9CF%C9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9C9C9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9FD20C8CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%C9C9CFC9CFC9CFC9C9C9CEC9C9C9CFC9C9C9CEC9C9C9CECEC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8CEC8C9C8CEC8C9C8CE%C8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C9CFC9CFC9CFC9CF%C9CFC9CFC9CFCFCFC9CFC9CFC9CFC9CFC9CFCECFC9CFCFCFC9CFCECFC9CF%CFC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9%CEC9CEC9CEC9CEC9CEC9CEC9C9C9CFC9CEC9CEC9CEC9CEC9CEC9CEC9C8C8%C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8%C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9%CFC9C9C9CEC9CEC9CFCEC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CE%C8C9C8CEC8C9C8C9C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9C8CFC9CEC9CEC9CEC9CEC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEFD05C9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8%C9C8C9C8C9C8C9C8C9C8C9C8C8C8C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CFCEC9CFC9CFC9CF%C9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8CEC8CEC9CEC8CEC9CE%C8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CF%C9C8CEC9C9C9CFC9CEC9CEC8C9C9CEC9C9C9CEC9CEC9CEC9CEC9CEC8C9C9%CEC9C9C9CEC9CEC9CEC9CEC9C9C8C9C9CEC9C9C9CEC9CEC9CEC9CEC9FD08%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8FD04C9CEC9%CEC9CEC9CEC9CEC9CEFD05C9CEC9C9C9CEC9CEC9CEC9CEC8FD04C9CEC9CE%CEFD05C8C9C8C9FD09C8CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CEC9CEC9CEC9CEC8CEC8%C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEFD07C8C9C8C9C9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9C9C9C1C9%C8C8C8C9C8C8C8C9C8C8C8C9C8C8C9CFC9CEC9CFC9CEC9CFC9CFC9CFCACE%C9CFC9CEC9CFC9CEC9CFC9CFC9CFCACEC9CFC9CEC9CFC9CFC9CFC9CFC9CF%CAC8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C8C8C9FD05%C8CEC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9C9C9CFC9CEC9CFC9CFC9CFC9CF%C9CFCFC9CEC9CEC8CEC9CEC8CEC9CEC8CEC9C9C8CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8CEC8%CEC8CEC9CEC8CEC8C9C9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFCFC9C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C8C9CF%C9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9%C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8CEC9CFC9CEC9CFC9CEC9CFC9CE%C9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFCFC9C8C8CEC8C9C8CEC8C9C8%CEC8C9C8CEC8CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8C9C8CEC8C9C8%CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9C9C9C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C8C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9%C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CE%C9C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9%C8C8C8CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CE%C9CEC9CFCFC9C8C8CEC8C9C8CEC8C9C8CEC8C9C8CEC8CEC9CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CEC9CFC9%CFC9CFC9CFC9CFC9CFC8C9C8CEC8C9C8CEC8CEC8CEC8CEC8CEC8CEC8CEC8%CEC8CEC8C9C8CEC8C9C8CEC9CEC9CEC9CFC9CFC9CFC9CFC9CFC9CEC9CEC9%CFC9CFC9CFC9CFC9CFC9CEC9C9CEC8C9C8C9C8C9C8C9C8C9C8C9C8C9C8CE%C9C9C8CEC9C9C9CEC9C9C9CEC9CEC9CEC8C9C8CEC9C9C9CEC9C9C9CEC9CE%C9CEC9C9C8CEC9C9C9CEC9C9C9CEC9CEC9C9C8C9C8C9C8C9C8C8C8C9C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8CEC9C9C8CEC9C9C8CEC9C9%C9CEC9CEC9CEC9C9C8CEC9C9C8CEC9C9C9CEC9CECEC9CFC9CFC9CFCFCFC9%CFC9CFC9CFC9CFC9CFCFCFC9CFCFCFC9CFC9CFC9CFC9CFC9CFCFCFC9CFCF%CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFCFCFC9CFC9CFC9CFC9CFC9CFCFCFC9%CFCFCFC8CEC8C9C8CEC8C9C8CEC8C9C8CEC8C9C9CFC9CFC9CFC9CFC9CFCF%CFC9CFCFCFC9CFC9CFC9CFC9CFC9CFCFCFC9CFCFCFC9CFC9CFC9CFCFC9CE%C9CEC9C9C9CEC9CEC9CEC9CEC9CEC9C9C9CEC9C9C9CEC9C9C9CEC9CEC9CE%C9C9C9CEC9C9C9CEC9CEC9CEC9C9C9CEC9C9C9CEC9C9C9CEC9C9C9CEC9C9%C9CEC9C9C9CEC9C9C9CEC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C9C8C9C9CE%C9C9C9CEC9C9C9CEC9C9C9CFC9C9C9CEC9C9C9CEC9C9C9CEC9C9C9CFC9C9%C9CEC9C9C9CFCEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC8CEC8CEC8CEC8CEC8CEC8%CEC8CEC8C9C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFCFCFC9CFC9CFC9CFCFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CF%C9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CE%C9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C8C8C9%C8C9C8C9C8C9C8C9C8C9C8C9C8C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9%C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFCEC9CFC9CFC9CFC9%CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC8C9C8CEC8C9C8CEC8C9C8CEC8C9C8C9C9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9%C8CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CE%C9CEC9CEC9CEC9CEFD05C9CEC9CEC9CEC9CEC9CEC9CEFD05C9CEC9CEC9CE%C9CEC9CEC9CEC9CEC9C8C8C9C8C9C8C9C8C9C8C9C8C9C8C8C8C9C9CEC9CE%C9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC8C9C9CE%C9CEC9CFCEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9%CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9%CFC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC8C9C8CEC8C9C8CEC8C9C8CEC8%C9C8CEC9CEC9CEC9CEC9CEC9CEC9CEC9CEC9CFC9CEC8CEC9CEC9CEC9CEC9%CEC9CFC9CFC8CEC9CEC9CEC9C9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFCACF%C9CEC9CFC9CFC9CFC9CFC9CFC9CFCACFC9CEC9CFC9CFC9CFC9CFC9CFC9CF%CACFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CEC9CFC9CFC9CFC9CFC9CF%C9CFC9CEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CF%C9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFCACFCEC9CEC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFCACFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFC9C9%C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CE%C9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CE%C9CEC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CE%C9CEC9CFC9C9C9CEC9CEC9CEC9CEC9CEC9CEC9CFC9C9C9CEC9CEC9CEC9CE%C9CEC9CEC9CFCEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFCFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CE%C9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CE%C9CEC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CEC9C9C9CFC9CEC9CFC9CEC9CF%C9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CE%C9CFC9CEC9CFC9C9C9CFC9CEC9CFC9CEC9CFC9CEC9CFCEC9CEC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9%C8CEC8C9C8C9C8C9C8FD04C9CEFD04C9C8C9C8C9C8C9C8FD04C9CEFD04C9%C8C9C8C9C9C9C8FD04C9CEFD04C9C8C9C8C9C9C9C8FD04C9CEC9CEC9C9C8%C9C8C9C9C9C8FD04C9CEFD04C9C8C9C8C9C8C9C8CEC9C9C9CEC9CEC9C9C8%C9C8C9C9C9C8CEC9C9C9CEC9CEC9C9C8C9C8C9C9C9C8CEC9C9C9CEC9CECF%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFCECFC9CFC9CFC9CFC9CF%C9CFCFCFC9CFCECFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFCFC9CFC9CFC9CF%C9CFC9CFC9CFC9CFCFCFCACFC8C8C8CEC8C9C8CEC8C8C8C9C8C8C8CEC9CF%C9CFC9CFC9CFC9CFC9CFCFCFCACFC9CFC9CFC9CFC9CFC9CFC9CFCFCFCACF%C9CFC9FD04CFC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CE%C9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CF%C9CEC9CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9C8C8C9C8C9C8C9C8C9C8C9%C8C9C8C8C8CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CEC9CEC9CFC9CEC9CF%C9CEC9CFC9CFC9CEC9CEC9CFC9CFC9C9CEC9CEC9CFC9CFC9CEC9CEC9CEC9%CEC9CFC9CEC9CFC9CFC9CEC9CEC9CEC9CEC9CFC9CEC9CFC9CFC8CEC9CEC9%CEC9CEC9CFC9CEC9CFC9CFC8CEC9CEC9CFC9CEC9CFC9CEC9CFC9CFC8CEC8%C9C8CEC8C9C8CEC8C9C8CEC8C8C8CFC9CEC9CFC9CEC9CFC9CEC9CFC9CFC8%CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFCAC8C9C8FD04C9CEC9%C9C8C9C8C9C8C9C9C9C8CEC9C9C9CEC9C9C8C9C8C9C8C9C9C9C8CEC9C9C9%CEC9C9C8C9C8C9C8C9C9C9C8CEC9C9C9CEC9C9C8C9C8C9C8C9C9C9C8CEC9%C9C9CEC9FD10C8C9C8C9C8C9C8C9C9C9C8CEC9C9C9CEC9C9C8C9C8C9C8C9%C9C9C8CEC9C9C9CEC9C9C8FD04C9CE%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">81</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-01-13T17:59:28-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-01-13T17:59:28-05:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-01-13T17:59:27-05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>228</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA5AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9CQzTFB8EtRsaI5/UM5b&#xA;HknXKXyk7aURfT5hWElz/LL9KP8A0y0Syd0vkf1MKj5fMNTNcBo29OUgqQxVGO4O1aDHIZ2DUuXc&#xA;ViI0dx81vqTfyTf8i5P6ZHin3T/0sv1J4R3j5hxuJVND6oPgVf8Apicshz4vkV4B5fY2J5iKjn/w&#xA;Lf0w+LLz+RRwDyWyzSCRTxkIZRuFY7gkb0GRnklYNS5dxZRgK6O+sP4S/wDASf0weKf6Xyl+peAe&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:8fbd6575-311a-42fd-9dfe-e0bbcd5c2506</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:8fbd6575-311a-42fd-9dfe-e0bbcd5c2506</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:A9F2C477DE40E31198D4B7340681DF46</stRef:instanceID>
            <stRef:documentID>xmp.did:A9F2C477DE40E31198D4B7340681DF46</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:927196B0C3B7E2119DFCBAE505B52A3D</stEvt:instanceID>
                  <stEvt:when>2013-05-08T15:17:53+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A64B8844E1B7E2119DFCBAE505B52A3D</stEvt:instanceID>
                  <stEvt:when>2013-05-08T18:44:51+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A9F2C477DE40E31198D4B7340681DF46</stEvt:instanceID>
                  <stEvt:when>2013-10-29T17:10:09-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8fbd6575-311a-42fd-9dfe-e0bbcd5c2506</stEvt:instanceID>
                  <stEvt:when>2014-01-13T17:59:28-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>692.982442</stDim:w>
            <stDim:h>615.987340</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -615.987 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 615.987 li
692.982 615.987 li
692.982 0 li
cp
clp
51.6656 327.497 mo
94.5762 327.497 li
180.398 327.497 li
223.309 327.497 li
223.309 288.997 li
180.398 288.997 li
180.398 250.522 li
137.487 250.522 li
51.6656 250.522 li
8.75486 250.522 li
8.75486 289.022 li
51.6656 289.022 li
51.6656 327.497 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.00262455 .156649 .612695 0 cmyk
f
652.418 365.996 mo
652.418 404.521 li
609.507 404.521 li
609.507 443.021 li
652.418 443.021 li
692.982 443.021 li
692.982 365.996 li
652.418 365.996 li
cp
f
437.863 442.995 mo
352.041 442.995 li
309.131 442.995 li
309.131 481.494 li
352.041 481.494 li
352.041 520.019 li
394.953 520.019 li
394.953 558.493 li
437.863 558.493 li
480.774 558.493 li
480.774 520.019 li
523.686 520.019 li
523.686 481.52 li
480.774 481.52 li
480.774 442.995 li
437.863 442.995 li
cp
f
520.686 517.019 mo
477.774 517.019 li
477.774 555.493 li
397.953 555.493 li
397.953 517.019 li
355.041 517.019 li
355.041 478.494 li
312.131 478.494 li
312.131 445.995 li
477.774 445.995 li
477.774 484.52 li
520.686 484.52 li
520.686 517.019 li
cp
480.774 481.52 mo
480.774 442.995 li
437.863 442.995 li
352.041 442.995 li
309.131 442.995 li
309.131 481.494 li
352.041 481.494 li
352.041 520.019 li
394.953 520.019 li
394.953 558.493 li
437.863 558.493 li
480.774 558.493 li
480.774 520.019 li
523.686 520.019 li
523.686 481.52 li
480.774 481.52 li
cp
0 .217746 .788052 0 cmyk
f
556.881 519.993 mo
556.854 520.019 li
556.881 520.019 li
556.881 519.993 li
cp
.0653696 .216434 .762753 0 cmyk
f
556.881 442.995 mo
556.838 442.995 li
556.881 443.021 li
556.881 442.995 li
cp
f
282.881 520.019 mo
282.938 520.019 li
282.881 519.993 li
282.881 520.019 li
cp
f
282.881 443.021 mo
282.895 442.995 li
282.881 442.995 li
282.881 443.021 li
cp
f
652.418 19.5258 mo
652.418 0 li
566.596 0 li
566.596 19.5258 li
523.686 19.5258 li
523.686 58.0253 li
566.596 58.0253 li
566.596 96.4995 li
609.507 96.4995 li
692.982 96.4995 li
692.982 19.5258 li
652.418 19.5258 li
cp
.00262455 .156649 .612695 0 cmyk
f
508.881 58.0253 mo
508.905 58.0253 li
508.881 58 li
508.881 58.0253 li
cp
.0653696 .216434 .762753 0 cmyk
f
309.131 0 mo
309.131 19.5258 li
394.953 19.5258 li
394.953 0 li
309.131 0 li
cp
.00262455 .156649 .612695 0 cmyk
f
0 0 mo
0 19.5258 li
51.6656 19.5258 li
51.6656 0 li
0 0 li
cp
.00598154 .0863661 .414313 0 cmyk
f
51.6656 0 mo
51.6656 19.5258 li
137.487 19.5258 li
137.487 0 li
51.6656 0 li
cp
f
137.487 0 mo
137.487 19.5258 li
223.309 19.5258 li
223.309 0 li
137.487 0 li
cp
f
223.309 0 mo
223.309 19.5258 li
309.131 19.5258 li
309.131 0 li
223.309 0 li
cp
f
394.953 0 mo
394.953 19.5258 li
480.774 19.5258 li
480.774 0 li
394.953 0 li
cp
f
480.774 0 mo
480.774 19.5258 li
566.596 19.5258 li
566.596 0 li
480.774 0 li
cp
f
652.418 0 mo
652.418 19.5258 li
692.982 19.5258 li
692.982 0 li
652.418 0 li
cp
f
653.611 2.26806 mo
653.611 18.3418 li
691.943 18.3418 li
655.516 16.0922 li
653.611 2.26806 li
cp
0 .217746 .788052 0 cmyk
f
654.369 .8208 mo
691.828 .8208 li
691.828 17.3545 li
689.406 2.89746 li
654.369 .8208 li
cp
.00192264 .0224613 .10486 0 cmyk
f
139.682 2.71289 mo
139.682 18.2876 li
221.018 18.2876 li
141.586 16.038 li
139.682 2.71289 li
cp
0 .217746 .788052 0 cmyk
f
140.721 1.32812 mo
221.537 1.32812 li
221.537 18.2876 li
219.114 3.40478 li
140.721 1.32812 li
cp
.00192264 .0224613 .10486 0 cmyk
f
225.691 2.71289 mo
225.691 18.2876 li
307.027 18.2876 li
227.595 16.038 li
225.691 2.71289 li
cp
0 .217746 .788052 0 cmyk
f
226.729 1.32812 mo
307.546 1.32812 li
307.546 18.2876 li
305.123 3.40478 li
226.729 1.32812 li
cp
.00192264 .0224613 .10486 0 cmyk
f
397.016 3.05908 mo
397.016 18.6337 li
478.352 18.6337 li
398.92 16.3842 li
397.016 3.05908 li
cp
0 .217746 .788052 0 cmyk
f
398.055 1.67431 mo
478.871 1.67431 li
478.871 18.6337 li
476.447 3.75097 li
398.055 1.67431 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 19.5004 mo
0 58 li
8.75486 58 li
8.75486 19.5004 li
0 19.5004 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.29395 20.7548 mo
1.29395 56.665 li
7.45606 56.665 li
2.56885 55.4965 li
1.29395 20.7548 li
cp
0 .217746 .788052 0 cmyk
f
1.8252 20.7548 mo
7.35006 20.7548 li
7.35006 56.665 li
5.86226 21.6049 li
1.8252 20.7548 li
cp
.00192264 .0224613 .10486 0 cmyk
f
180.398 58 mo
94.5762 58 li
94.5762 19.5004 li
180.398 19.5004 li
180.398 58 li
cp
.00598154 .0863661 .414313 0 cmyk
f
96.2452 21.2295 mo
96.2452 56.0131 li
179.313 56.0131 li
98.149 53.7636 li
96.2452 21.2295 li
cp
0 .217746 .788052 0 cmyk
f
97.6299 20.5371 mo
178.446 20.5371 li
178.446 55.4946 li
176.023 22.6137 li
97.6299 20.5371 li
cp
.00192264 .0224613 .10486 0 cmyk
f
182.427 21.2295 mo
182.427 56.0131 li
265.495 56.0131 li
184.331 53.7636 li
182.427 21.2295 li
cp
0 .217746 .788052 0 cmyk
f
183.812 20.5371 mo
264.628 20.5371 li
264.628 55.4946 li
262.205 22.6137 li
183.812 20.5371 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 58 mo
180.398 58 li
180.398 19.5004 li
266.22 19.5004 li
266.22 58 li
cp
.00598154 .0863661 .414313 0 cmyk
f
352.041 58 mo
266.22 58 li
266.22 19.5004 li
352.041 19.5004 li
352.041 58 li
cp
f
268.608 21.2295 mo
268.608 56.0131 li
351.677 56.0131 li
270.512 53.7636 li
268.608 21.2295 li
cp
0 .217746 .788052 0 cmyk
f
269.993 20.5371 mo
350.81 20.5371 li
350.81 55.4946 li
348.387 22.6137 li
269.993 20.5371 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 58 mo
352.041 58 li
352.041 19.5004 li
437.863 19.5004 li
437.863 58 li
cp
.00598154 .0863661 .414313 0 cmyk
f
354.79 21.2295 mo
354.79 56.0131 li
437.858 56.0131 li
356.693 53.7636 li
354.79 21.2295 li
cp
0 .217746 .788052 0 cmyk
f
356.175 20.5371 mo
436.991 20.5371 li
436.991 55.4946 li
434.568 22.6137 li
356.175 20.5371 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 58 mo
437.863 58 li
437.863 19.5004 li
523.686 19.5004 li
523.686 58 li
cp
.00598154 .0863661 .414313 0 cmyk
f
223.309 96.5244 mo
137.487 96.5244 li
137.487 58.0253 li
223.309 58.0253 li
223.309 96.5244 li
cp
f
139.335 59.9941 mo
139.335 94.7778 li
222.404 94.7778 li
141.239 92.5283 li
139.335 59.9941 li
cp
0 .217746 .788052 0 cmyk
f
140.72 59.3017 mo
221.537 59.3017 li
221.537 94.2592 li
219.114 61.3784 li
140.72 59.3017 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 96.5244 mo
223.309 96.5244 li
223.309 58.0253 li
309.131 58.0253 li
309.131 96.5244 li
cp
.00598154 .0863661 .414313 0 cmyk
f
226.556 59.9941 mo
226.556 94.7778 li
309.624 94.7778 li
228.459 92.5283 li
226.556 59.9941 li
cp
0 .217746 .788052 0 cmyk
f
227.94 59.3017 mo
308.757 59.3017 li
308.757 94.2592 li
306.334 61.3784 li
227.94 59.3017 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 96.5244 mo
309.131 96.5244 li
309.131 58.0253 li
394.953 58.0253 li
394.953 96.5244 li
cp
.00598154 .0863661 .414313 0 cmyk
f
311.007 60.167 mo
311.007 94.9506 li
394.075 94.9506 li
312.911 92.7011 li
311.007 60.167 li
cp
0 .217746 .788052 0 cmyk
f
312.392 59.4746 mo
393.208 59.4746 li
393.208 94.4321 li
390.785 61.5512 li
312.392 59.4746 li
cp
.00192264 .0224613 .10486 0 cmyk
f
480.774 96.5244 mo
394.953 96.5244 li
394.953 58.0253 li
480.774 58.0253 li
480.774 96.5244 li
cp
.00598154 .0863661 .414313 0 cmyk
f
397.188 59.9941 mo
397.188 94.7778 li
480.257 94.7778 li
399.092 92.5283 li
397.188 59.9941 li
cp
0 .217746 .788052 0 cmyk
f
398.573 59.3017 mo
479.39 59.3017 li
479.39 94.2592 li
476.967 61.3784 li
398.573 59.3017 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 96.5244 mo
480.774 96.5244 li
480.774 58.0253 li
566.596 58.0253 li
566.596 96.5244 li
cp
.00598154 .0863661 .414313 0 cmyk
f
482.505 59.9941 mo
482.505 94.7778 li
565.573 94.7778 li
484.408 92.5283 li
482.505 59.9941 li
cp
0 .217746 .788052 0 cmyk
f
483.89 59.3017 mo
564.706 59.3017 li
564.706 94.2592 li
562.283 61.3784 li
483.89 59.3017 li
cp
.00192264 .0224613 .10486 0 cmyk
f
440.972 21.2295 mo
440.972 56.0131 li
524.04 56.0131 li
442.875 53.7636 li
440.972 21.2295 li
cp
0 .217746 .788052 0 cmyk
f
442.356 20.5371 mo
523.173 20.5371 li
523.173 55.4946 li
520.75 22.6137 li
442.356 20.5371 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 134.999 mo
352.041 134.999 li
352.041 96.4995 li
437.863 96.4995 li
437.863 134.999 li
cp
.00262455 .156649 .612695 0 cmyk
f
0 96.4995 mo
0 134.999 li
8.75486 134.999 li
8.75486 96.4995 li
0 96.4995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.38281 97.9795 mo
1.38281 133.89 li
7.54496 133.89 li
2.33887 132.296 li
1.38281 97.9795 li
cp
0 .217746 .788052 0 cmyk
f
1.91406 97.9795 mo
7.43896 97.9795 li
7.43896 133.89 li
5.95116 98.8295 li
1.91406 97.9795 li
cp
.00192264 .0224613 .10486 0 cmyk
f
94.5762 134.999 mo
8.75486 134.999 li
8.75486 96.4995 li
94.5762 96.4995 li
94.5762 134.999 li
cp
.00598154 .0863661 .414313 0 cmyk
f
10.565 98.8144 mo
10.565 133.598 li
93.6333 133.598 li
12.4688 131.349 li
10.565 98.8144 li
cp
0 .217746 .788052 0 cmyk
f
11.9497 98.122 mo
92.7662 98.122 li
92.7662 133.08 li
90.3433 100.199 li
11.9497 98.122 li
cp
.00192264 .0224613 .10486 0 cmyk
f
180.398 134.999 mo
94.5762 134.999 li
94.5762 96.4995 li
180.398 96.4995 li
180.398 134.999 li
cp
.00598154 .0863661 .414313 0 cmyk
f
96.4004 98.8144 mo
96.4004 133.598 li
179.469 133.598 li
98.3042 131.349 li
96.4004 98.8144 li
cp
0 .217746 .788052 0 cmyk
f
97.7852 98.122 mo
178.602 98.122 li
178.602 133.08 li
176.179 100.199 li
97.7852 98.122 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 134.999 mo
180.398 134.999 li
180.398 96.4995 li
266.22 96.4995 li
266.22 134.999 li
cp
.00598154 .0863661 .414313 0 cmyk
f
182.582 98.8144 mo
182.582 133.598 li
265.65 133.598 li
184.485 131.349 li
182.582 98.8144 li
cp
0 .217746 .788052 0 cmyk
f
183.966 98.122 mo
264.783 98.122 li
264.783 133.08 li
262.36 100.199 li
183.966 98.122 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 134.999 mo
266.22 134.999 li
266.22 96.4995 li
352.041 96.4995 li
352.041 134.999 li
cp
.00598154 .0863661 .414313 0 cmyk
f
267.725 98.8144 mo
267.725 133.598 li
350.793 133.598 li
269.628 131.349 li
267.725 98.8144 li
cp
0 .217746 .788052 0 cmyk
f
269.109 98.122 mo
349.926 98.122 li
349.926 133.08 li
347.503 100.199 li
269.109 98.122 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 134.999 mo
437.863 134.999 li
437.863 96.4995 li
523.686 96.4995 li
523.686 134.999 li
cp
.00598154 .0863661 .414313 0 cmyk
f
439.413 99.1045 mo
439.413 133.888 li
522.481 133.888 li
441.316 131.639 li
439.413 99.1045 li
cp
0 .217746 .788052 0 cmyk
f
440.798 98.4121 mo
521.614 98.4121 li
521.614 133.37 li
519.191 100.489 li
440.798 98.4121 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 134.999 mo
523.686 134.999 li
523.686 96.4995 li
609.507 96.4995 li
609.507 134.999 li
cp
.00598154 .0863661 .414313 0 cmyk
f
525.25 99.1045 mo
525.25 133.888 li
608.318 133.888 li
527.153 131.639 li
525.25 99.1045 li
cp
0 .217746 .788052 0 cmyk
f
526.635 98.4121 mo
607.451 98.4121 li
607.451 133.37 li
605.027 100.489 li
526.635 98.4121 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 96.4995 mo
609.507 96.4995 li
609.507 134.999 li
692.982 134.999 li
692.982 96.4995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
610.912 98.5854 mo
610.912 133.369 li
690.344 133.369 li
612.816 131.12 li
610.912 98.5854 li
cp
0 .217746 .788052 0 cmyk
f
612.123 97.893 mo
691.383 97.893 li
691.383 132.851 li
688.96 99.9697 li
612.123 97.893 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 135.024 mo
0 173.523 li
51.6656 173.523 li
51.6656 135.024 li
0 135.024 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.44434 136.622 mo
1.44434 172.004 li
50.0816 172.004 li
3.34815 169.754 li
1.44434 136.622 li
cp
0 .217746 .788052 0 cmyk
f
1.52832 135.997 mo
50.3921 135.997 li
50.3921 171.576 li
47.9693 138.073 li
1.52832 135.997 li
cp
.00192264 .0224613 .10486 0 cmyk
f
137.487 173.523 mo
51.6656 173.523 li
51.6656 135.024 li
137.487 135.024 li
137.487 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
53.1368 137.06 mo
53.1368 171.843 li
136.205 171.843 li
55.0406 169.594 li
53.1368 137.06 li
cp
0 .217746 .788052 0 cmyk
f
54.5215 136.367 mo
135.338 136.367 li
135.338 171.325 li
132.915 138.444 li
54.5215 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
223.309 173.523 mo
137.487 173.523 li
137.487 135.024 li
223.309 135.024 li
223.309 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
139.145 137.06 mo
139.145 171.843 li
222.213 171.843 li
141.049 169.594 li
139.145 137.06 li
cp
0 .217746 .788052 0 cmyk
f
140.53 136.367 mo
221.346 136.367 li
221.346 171.325 li
218.923 138.444 li
140.53 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 173.523 mo
223.309 173.523 li
223.309 135.024 li
309.131 135.024 li
309.131 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
225.153 137.06 mo
225.153 171.843 li
308.222 171.843 li
227.057 169.594 li
225.153 137.06 li
cp
0 .217746 .788052 0 cmyk
f
226.538 136.367 mo
307.354 136.367 li
307.354 171.325 li
304.932 138.444 li
226.538 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 173.523 mo
309.131 173.523 li
309.131 135.024 li
394.953 135.024 li
394.953 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
311.162 137.06 mo
311.162 171.843 li
394.23 171.843 li
313.065 169.594 li
311.162 137.06 li
cp
0 .217746 .788052 0 cmyk
f
312.546 136.367 mo
393.363 136.367 li
393.363 171.325 li
390.939 138.444 li
312.546 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
480.774 173.523 mo
394.953 173.523 li
394.953 135.024 li
480.774 135.024 li
480.774 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
397.17 137.06 mo
397.17 171.843 li
480.238 171.843 li
399.074 169.594 li
397.17 137.06 li
cp
0 .217746 .788052 0 cmyk
f
398.555 136.367 mo
479.371 136.367 li
479.371 171.325 li
476.948 138.444 li
398.555 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 173.523 mo
480.774 173.523 li
480.774 135.024 li
566.596 135.024 li
566.596 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
483.178 137.06 mo
483.178 171.843 li
566.246 171.843 li
485.082 169.594 li
483.178 137.06 li
cp
0 .217746 .788052 0 cmyk
f
484.562 136.367 mo
565.379 136.367 li
565.379 171.325 li
562.957 138.444 li
484.562 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 173.523 mo
566.596 173.523 li
566.596 135.024 li
652.418 135.024 li
652.418 173.523 li
cp
.00598154 .0863661 .414313 0 cmyk
f
569.187 137.06 mo
569.187 171.843 li
652.255 171.843 li
571.09 169.594 li
569.187 137.06 li
cp
0 .217746 .788052 0 cmyk
f
570.571 136.367 mo
651.388 136.367 li
651.388 171.325 li
648.965 138.444 li
570.571 136.367 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 135.024 mo
652.418 135.024 li
652.418 173.523 li
692.982 173.523 li
692.982 135.024 li
cp
.00598154 .0863661 .414313 0 cmyk
f
653.561 136.953 mo
653.561 172.335 li
691.894 172.335 li
655.465 170.085 li
653.561 136.953 li
cp
0 .217746 .788052 0 cmyk
f
653.561 136.328 mo
691.99 136.328 li
691.99 171.907 li
689.568 138.404 li
653.561 136.328 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 173.499 mo
0 211.998 li
8.75486 211.998 li
8.75486 173.499 li
0 173.499 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.32813 175.136 mo
1.32813 211.046 li
7.49026 211.046 li
2.28418 209.453 li
1.32813 175.136 li
cp
0 .217746 .788052 0 cmyk
f
1.85938 175.136 mo
7.38426 175.136 li
7.38426 211.046 li
5.89646 175.986 li
1.85938 175.136 li
cp
.00192264 .0224613 .10486 0 cmyk
f
94.5762 211.998 mo
8.75486 211.998 li
8.75486 173.499 li
94.5762 173.499 li
94.5762 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
10.3609 175.848 mo
10.3609 210.632 li
93.4292 210.632 li
12.2647 208.382 li
10.3609 175.848 li
cp
0 .217746 .788052 0 cmyk
f
11.7456 175.156 mo
92.5621 175.156 li
92.5621 210.113 li
90.1392 177.232 li
11.7456 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
180.398 211.998 mo
94.5762 211.998 li
94.5762 173.499 li
180.398 173.499 li
180.398 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
96.1963 175.848 mo
96.1963 210.632 li
179.265 210.632 li
98.1001 208.382 li
96.1963 175.848 li
cp
0 .217746 .788052 0 cmyk
f
97.5811 175.156 mo
178.397 175.156 li
178.397 210.113 li
175.975 177.232 li
97.5811 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 211.998 mo
180.398 211.998 li
180.398 173.499 li
266.22 173.499 li
266.22 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
182.032 175.848 mo
182.032 210.632 li
265.1 210.632 li
183.936 208.382 li
182.032 175.848 li
cp
0 .217746 .788052 0 cmyk
f
183.416 175.156 mo
264.233 175.156 li
264.233 210.113 li
261.81 177.232 li
183.416 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 211.998 mo
266.22 211.998 li
266.22 173.499 li
352.041 173.499 li
352.041 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
267.867 175.848 mo
267.867 210.632 li
350.936 210.632 li
269.771 208.382 li
267.867 175.848 li
cp
0 .217746 .788052 0 cmyk
f
269.252 175.156 mo
350.068 175.156 li
350.068 210.113 li
347.645 177.232 li
269.252 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 211.998 mo
352.041 211.998 li
352.041 173.499 li
437.863 173.499 li
437.863 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
353.703 175.848 mo
353.703 210.632 li
436.771 210.632 li
355.606 208.382 li
353.703 175.848 li
cp
0 .217746 .788052 0 cmyk
f
355.088 175.156 mo
435.904 175.156 li
435.904 210.113 li
433.48 177.232 li
355.088 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 211.998 mo
437.863 211.998 li
437.863 173.499 li
523.686 173.499 li
523.686 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
439.538 175.848 mo
439.538 210.632 li
522.606 210.632 li
441.441 208.382 li
439.538 175.848 li
cp
0 .217746 .788052 0 cmyk
f
440.923 175.156 mo
521.739 175.156 li
521.739 210.113 li
519.316 177.232 li
440.923 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 211.998 mo
523.686 211.998 li
523.686 173.499 li
609.507 173.499 li
609.507 211.998 li
cp
.00598154 .0863661 .414313 0 cmyk
f
525.373 175.848 mo
525.373 210.632 li
608.441 210.632 li
527.277 208.382 li
525.373 175.848 li
cp
0 .217746 .788052 0 cmyk
f
526.758 175.156 mo
607.574 175.156 li
607.574 210.113 li
605.152 177.232 li
526.758 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 173.499 mo
609.507 173.499 li
609.507 211.998 li
692.982 211.998 li
692.982 173.499 li
cp
.00598154 .0863661 .414313 0 cmyk
f
611.036 175.848 mo
611.036 210.632 li
690.688 210.632 li
612.939 208.382 li
611.036 175.848 li
cp
0 .217746 .788052 0 cmyk
f
612.121 175.156 mo
691.507 175.156 li
691.507 210.113 li
689.084 177.232 li
612.121 175.156 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 212.023 mo
0 250.522 li
51.6656 250.522 li
51.6656 212.023 li
0 212.023 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.53076 213.728 mo
1.53076 249.11 li
50.168 249.11 li
3.43457 246.861 li
1.53076 213.728 li
cp
0 .217746 .788052 0 cmyk
f
1.61475 213.103 mo
50.4786 213.103 li
50.4786 248.682 li
48.0557 215.18 li
1.61475 213.103 li
cp
.00192264 .0224613 .10486 0 cmyk
f
137.487 250.522 mo
51.6656 250.522 li
51.6656 212.023 li
137.487 212.023 li
137.487 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
53.7979 214.612 mo
53.7979 249.396 li
136.866 249.396 li
55.7017 247.146 li
53.7979 214.612 li
cp
0 .217746 .788052 0 cmyk
f
55.1827 213.92 mo
135.999 213.92 li
135.999 248.877 li
133.576 215.997 li
55.1827 213.92 li
cp
.00192264 .0224613 .10486 0 cmyk
f
223.309 250.522 mo
137.487 250.522 li
137.487 212.023 li
223.309 212.023 li
223.309 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
138.898 214.506 mo
138.898 249.29 li
221.967 249.29 li
140.802 247.04 li
138.898 214.506 li
cp
0 .217746 .788052 0 cmyk
f
140.283 213.813 mo
221.1 213.813 li
221.1 248.771 li
218.677 215.89 li
140.283 213.813 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 250.522 mo
223.309 250.522 li
223.309 212.023 li
309.131 212.023 li
309.131 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
224.743 214.506 mo
224.743 249.29 li
307.811 249.29 li
226.646 247.04 li
224.743 214.506 li
cp
0 .217746 .788052 0 cmyk
f
226.127 213.813 mo
306.944 213.813 li
306.944 248.771 li
304.521 215.89 li
226.127 213.813 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 250.522 mo
309.131 250.522 li
309.131 212.023 li
394.953 212.023 li
394.953 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
310.587 214.506 mo
310.587 249.29 li
393.655 249.29 li
312.491 247.04 li
310.587 214.506 li
cp
0 .217746 .788052 0 cmyk
f
311.972 213.813 mo
392.788 213.813 li
392.788 248.771 li
390.365 215.89 li
311.972 213.813 li
cp
.00192264 .0224613 .10486 0 cmyk
f
480.774 250.522 mo
394.953 250.522 li
394.953 212.023 li
480.774 212.023 li
480.774 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
396.432 214.506 mo
396.432 249.29 li
479.5 249.29 li
398.335 247.04 li
396.432 214.506 li
cp
0 .217746 .788052 0 cmyk
f
397.816 213.813 mo
478.633 213.813 li
478.633 248.771 li
476.209 215.89 li
397.816 213.813 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 250.522 mo
480.774 250.522 li
480.774 212.023 li
566.596 212.023 li
566.596 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
482.275 214.506 mo
482.275 249.29 li
565.344 249.29 li
484.18 247.04 li
482.275 214.506 li
cp
0 .217746 .788052 0 cmyk
f
483.66 213.813 mo
564.477 213.813 li
564.477 248.771 li
562.054 215.89 li
483.66 213.813 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 250.522 mo
566.596 250.522 li
566.596 212.023 li
652.418 212.023 li
652.418 250.522 li
cp
.00598154 .0863661 .414313 0 cmyk
f
568.119 214.506 mo
568.119 249.29 li
651.187 249.29 li
570.023 247.04 li
568.119 214.506 li
cp
0 .217746 .788052 0 cmyk
f
569.504 213.813 mo
650.32 213.813 li
650.32 248.771 li
647.898 215.89 li
569.504 213.813 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 212.023 mo
652.418 212.023 li
652.418 250.522 li
692.982 250.522 li
692.982 212.023 li
cp
.00598154 .0863661 .414313 0 cmyk
f
653.424 213.922 mo
653.424 249.304 li
691.756 249.304 li
655.327 247.055 li
653.424 213.922 li
cp
0 .217746 .788052 0 cmyk
f
653.424 213.297 mo
691.854 213.297 li
691.854 248.876 li
689.43 215.374 li
653.424 213.297 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 250.498 mo
0 288.997 li
8.75486 288.997 li
8.75486 250.498 li
0 250.498 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.3169 251.943 mo
1.3169 287.854 li
7.47896 287.854 li
2.27295 286.26 li
1.3169 251.943 li
cp
0 .217746 .788052 0 cmyk
f
1.84815 251.943 mo
7.37306 251.943 li
7.37306 287.854 li
5.88526 252.793 li
1.84815 251.943 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 288.997 mo
180.398 288.997 li
180.398 250.498 li
266.22 250.498 li
266.22 288.997 li
cp
.00598154 .0863661 .414313 0 cmyk
f
181.821 253.072 mo
181.821 287.856 li
265.102 287.856 li
183.725 285.606 li
181.821 253.072 li
cp
0 .217746 .788052 0 cmyk
f
182.232 252.38 mo
264.66 252.38 li
264.66 287.853 li
262.237 254.457 li
182.232 252.38 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 288.997 mo
266.22 288.997 li
266.22 250.498 li
352.041 250.498 li
352.041 288.997 li
cp
.00598154 .0863661 .414313 0 cmyk
f
267.666 253.072 mo
267.666 287.856 li
350.946 287.856 li
269.569 285.606 li
267.666 253.072 li
cp
0 .217746 .788052 0 cmyk
f
268.077 252.38 mo
350.504 252.38 li
350.504 287.853 li
348.081 254.457 li
268.077 252.38 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 288.997 mo
352.041 288.997 li
352.041 250.498 li
437.863 250.498 li
437.863 288.997 li
cp
.00598154 .0863661 .414313 0 cmyk
f
353.51 253.072 mo
353.51 287.856 li
436.791 287.856 li
355.414 285.606 li
353.51 253.072 li
cp
0 .217746 .788052 0 cmyk
f
353.921 252.38 mo
436.348 252.38 li
436.348 287.853 li
433.926 254.457 li
353.921 252.38 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 288.997 mo
437.863 288.997 li
437.863 250.498 li
523.686 250.498 li
523.686 288.997 li
cp
.00598154 .0863661 .414313 0 cmyk
f
439.354 253.072 mo
439.354 287.856 li
522.635 287.856 li
441.258 285.606 li
439.354 253.072 li
cp
0 .217746 .788052 0 cmyk
f
439.766 252.38 mo
522.192 252.38 li
522.192 287.853 li
519.77 254.457 li
439.766 252.38 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 288.997 mo
523.686 288.997 li
523.686 250.498 li
609.507 250.498 li
609.507 288.997 li
cp
.00598154 .0863661 .414313 0 cmyk
f
525.198 253.072 mo
525.198 287.856 li
608.479 287.856 li
527.102 285.606 li
525.198 253.072 li
cp
0 .217746 .788052 0 cmyk
f
525.609 252.38 mo
608.037 252.38 li
608.037 287.853 li
605.613 254.457 li
525.609 252.38 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 250.498 mo
609.507 250.498 li
609.507 288.997 li
692.982 288.997 li
692.982 250.498 li
cp
.00598154 .0863661 .414313 0 cmyk
f
566.596 327.521 mo
480.774 327.521 li
480.774 289.022 li
566.596 289.022 li
566.596 327.521 li
cp
.00262455 .156649 .612695 0 cmyk
f
0 289.022 mo
0 327.521 li
51.6656 327.521 li
51.6656 289.022 li
0 289.022 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.19238 290.997 mo
1.19238 326.379 li
49.8296 326.379 li
3.09619 324.13 li
1.19238 290.997 li
cp
0 .217746 .788052 0 cmyk
f
1.27637 290.372 mo
50.1402 290.372 li
50.1402 325.95 li
47.7173 292.448 li
1.27637 290.372 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 327.521 mo
223.309 327.521 li
223.309 289.022 li
309.131 289.022 li
309.131 327.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
224.742 290.827 mo
224.742 326.21 li
307.705 326.21 li
226.646 323.96 li
224.742 290.827 li
cp
0 .217746 .788052 0 cmyk
f
225.154 290.202 mo
308.006 290.202 li
308.006 325.781 li
305.583 292.279 li
225.154 290.202 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 327.521 mo
309.131 327.521 li
309.131 289.022 li
394.953 289.022 li
394.953 327.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
310.374 290.827 mo
310.374 326.21 li
393.336 326.21 li
312.278 323.96 li
310.374 290.827 li
cp
0 .217746 .788052 0 cmyk
f
310.786 290.202 mo
393.639 290.202 li
393.639 325.781 li
391.215 292.279 li
310.786 290.202 li
cp
.00192264 .0224613 .10486 0 cmyk
f
480.774 327.521 mo
394.953 327.521 li
394.953 289.022 li
480.774 289.022 li
480.774 327.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
396.537 290.827 mo
396.537 326.21 li
479.5 326.21 li
398.441 323.96 li
396.537 290.827 li
cp
0 .217746 .788052 0 cmyk
f
396.949 290.202 mo
479.801 290.202 li
479.801 325.781 li
477.379 292.279 li
396.949 290.202 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 327.521 mo
566.596 327.521 li
566.596 289.022 li
652.418 289.022 li
652.418 327.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
567.906 290.827 mo
567.906 326.21 li
650.869 326.21 li
569.811 323.96 li
567.906 290.827 li
cp
0 .217746 .788052 0 cmyk
f
568.318 290.202 mo
651.171 290.202 li
651.171 325.781 li
648.748 292.279 li
568.318 290.202 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 289.022 mo
652.418 289.022 li
652.418 327.521 li
692.982 327.521 li
692.982 289.022 li
cp
.00598154 .0863661 .414313 0 cmyk
f
653.791 291.011 mo
653.791 326.394 li
692.124 326.394 li
655.695 324.144 li
653.791 291.011 li
cp
0 .217746 .788052 0 cmyk
f
653.791 290.386 mo
692.221 290.386 li
692.221 325.965 li
689.799 292.462 li
653.791 290.386 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 365.996 mo
266.22 365.996 li
266.22 327.497 li
352.041 327.497 li
352.041 365.996 li
cp
.00262455 .156649 .612695 0 cmyk
f
0 327.497 mo
0 365.996 li
8.75486 365.996 li
8.75486 327.497 li
0 327.497 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.4375 328.557 mo
1.4375 364.467 li
7.59966 364.467 li
2.39356 362.873 li
1.4375 328.557 li
cp
0 .217746 .788052 0 cmyk
f
1.96875 328.557 mo
7.49366 328.557 li
7.49366 364.467 li
6.00586 329.407 li
1.96875 328.557 li
cp
.00192264 .0224613 .10486 0 cmyk
f
94.5762 365.996 mo
8.75486 365.996 li
8.75486 327.497 li
94.5762 327.497 li
94.5762 365.996 li
cp
.00598154 .0863661 .414313 0 cmyk
f
10.1338 329.5 mo
10.1338 364.882 li
93.0962 364.882 li
12.0376 362.633 li
10.1338 329.5 li
cp
0 .217746 .788052 0 cmyk
f
10.5459 328.875 mo
93.398 328.875 li
93.398 364.454 li
90.9751 330.952 li
10.5459 328.875 li
cp
.00192264 .0224613 .10486 0 cmyk
f
180.398 365.996 mo
94.5762 365.996 li
94.5762 327.497 li
180.398 327.497 li
180.398 365.996 li
cp
.00598154 .0863661 .414313 0 cmyk
f
95.9771 329.5 mo
95.9771 364.882 li
178.939 364.882 li
97.8809 362.633 li
95.9771 329.5 li
cp
0 .217746 .788052 0 cmyk
f
96.3892 328.875 mo
179.241 328.875 li
179.241 364.454 li
176.818 330.952 li
96.3892 328.875 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 365.996 mo
180.398 365.996 li
180.398 327.497 li
266.22 327.497 li
266.22 365.996 li
cp
.00598154 .0863661 .414313 0 cmyk
f
181.821 329.5 mo
181.821 364.882 li
264.784 364.882 li
183.725 362.633 li
181.821 329.5 li
cp
0 .217746 .788052 0 cmyk
f
182.233 328.875 mo
265.085 328.875 li
265.085 364.454 li
262.663 330.952 li
182.233 328.875 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 365.996 mo
352.041 365.996 li
352.041 327.497 li
437.863 327.497 li
437.863 365.996 li
cp
.00598154 .0863661 .414313 0 cmyk
f
353.19 329.5 mo
353.19 364.882 li
436.152 364.882 li
355.094 362.633 li
353.19 329.5 li
cp
0 .217746 .788052 0 cmyk
f
353.603 328.875 mo
436.455 328.875 li
436.455 364.454 li
434.031 330.952 li
353.603 328.875 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 365.996 mo
437.863 365.996 li
437.863 327.497 li
523.686 327.497 li
523.686 365.996 li
cp
.00598154 .0863661 .414313 0 cmyk
f
439.141 329.5 mo
439.141 364.882 li
522.104 364.882 li
441.045 362.633 li
439.141 329.5 li
cp
0 .217746 .788052 0 cmyk
f
439.553 328.875 mo
522.404 328.875 li
522.404 364.454 li
519.982 330.952 li
439.553 328.875 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 365.996 mo
523.686 365.996 li
523.686 327.497 li
609.507 327.497 li
609.507 365.996 li
cp
.00598154 .0863661 .414313 0 cmyk
f
525.091 329.5 mo
525.091 364.882 li
608.053 364.882 li
526.994 362.633 li
525.091 329.5 li
cp
0 .217746 .788052 0 cmyk
f
525.503 328.875 mo
608.355 328.875 li
608.355 364.454 li
605.932 330.952 li
525.503 328.875 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 327.497 mo
609.507 327.497 li
609.507 365.996 li
692.982 365.996 li
692.982 327.497 li
cp
.00598154 .0863661 .414313 0 cmyk
f
610.828 329.394 mo
610.828 364.776 li
691.241 364.776 li
612.732 362.526 li
610.828 329.394 li
cp
0 .217746 .788052 0 cmyk
f
611.559 328.769 mo
691.756 328.769 li
691.756 364.348 li
689.332 330.845 li
611.559 328.769 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 366.021 mo
0 404.521 li
51.6656 404.521 li
51.6656 366.021 li
0 366.021 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.19141 367.978 mo
1.19141 403.36 li
49.8287 403.36 li
3.09522 401.11 li
1.19141 367.978 li
cp
0 .217746 .788052 0 cmyk
f
1.27539 367.353 mo
50.1392 367.353 li
50.1392 402.933 li
47.7163 369.43 li
1.27539 367.353 li
cp
.00192264 .0224613 .10486 0 cmyk
f
137.487 404.521 mo
51.6656 404.521 li
51.6656 366.021 li
137.487 366.021 li
137.487 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
52.8433 367.854 mo
52.8433 403.235 li
135.806 403.235 li
54.7471 400.986 li
52.8433 367.854 li
cp
0 .217746 .788052 0 cmyk
f
53.2554 367.229 mo
136.107 367.229 li
136.107 402.808 li
133.685 369.306 li
53.2554 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
223.309 404.521 mo
137.487 404.521 li
137.487 366.021 li
223.309 366.021 li
223.309 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
138.794 367.854 mo
138.794 403.235 li
221.756 403.235 li
140.698 400.986 li
138.794 367.854 li
cp
0 .217746 .788052 0 cmyk
f
139.206 367.229 mo
222.058 367.229 li
222.058 402.808 li
219.635 369.306 li
139.206 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 404.521 mo
223.309 404.521 li
223.309 366.021 li
309.131 366.021 li
309.131 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
224.745 367.854 mo
224.745 403.235 li
307.707 403.235 li
226.648 400.986 li
224.745 367.854 li
cp
0 .217746 .788052 0 cmyk
f
225.157 367.229 mo
308.009 367.229 li
308.009 402.808 li
305.586 369.306 li
225.157 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 404.521 mo
309.131 404.521 li
309.131 366.021 li
394.953 366.021 li
394.953 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
310.695 367.854 mo
310.695 403.235 li
393.658 403.235 li
312.599 400.986 li
310.695 367.854 li
cp
0 .217746 .788052 0 cmyk
f
311.107 367.229 mo
393.959 367.229 li
393.959 402.808 li
391.537 369.306 li
311.107 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
480.774 404.521 mo
394.953 404.521 li
394.953 366.021 li
480.774 366.021 li
480.774 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
396.115 367.854 mo
396.115 403.235 li
479.077 403.235 li
398.019 400.986 li
396.115 367.854 li
cp
0 .217746 .788052 0 cmyk
f
396.527 367.229 mo
479.379 367.229 li
479.379 402.808 li
476.956 369.306 li
396.527 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 404.521 mo
480.774 404.521 li
480.774 366.021 li
566.596 366.021 li
566.596 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
482.065 367.854 mo
482.065 403.235 li
565.027 403.235 li
483.969 400.986 li
482.065 367.854 li
cp
0 .217746 .788052 0 cmyk
f
482.478 367.229 mo
565.33 367.229 li
565.33 402.808 li
562.906 369.306 li
482.478 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 404.521 mo
566.596 404.521 li
566.596 366.021 li
652.418 366.021 li
652.418 404.521 li
cp
.00598154 .0863661 .414313 0 cmyk
f
567.91 367.854 mo
567.91 403.235 li
650.872 403.235 li
569.813 400.986 li
567.91 367.854 li
cp
0 .217746 .788052 0 cmyk
f
568.322 367.229 mo
651.174 367.229 li
651.174 402.808 li
648.751 369.306 li
568.322 367.229 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 404.495 mo
0 442.995 li
8.75486 442.995 li
8.75486 404.495 li
0 404.495 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.32031 405.601 mo
1.32031 441.511 li
7.48246 441.511 li
2.27637 439.917 li
1.32031 405.601 li
cp
0 .217746 .788052 0 cmyk
f
1.85156 405.601 mo
7.37646 405.601 li
7.37646 441.511 li
5.88866 406.45 li
1.85156 405.601 li
cp
.00192264 .0224613 .10486 0 cmyk
f
94.5762 442.995 mo
8.75486 442.995 li
8.75486 404.495 li
94.5762 404.495 li
94.5762 442.995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
180.398 442.995 mo
94.5762 442.995 li
94.5762 404.495 li
180.398 404.495 li
180.398 442.995 li
cp
f
95.6587 406.313 mo
95.6587 441.696 li
178.621 441.696 li
97.5625 439.446 li
95.6587 406.313 li
cp
0 .217746 .788052 0 cmyk
f
96.0708 405.688 mo
178.923 405.688 li
178.923 441.268 li
176.5 407.765 li
96.0708 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 442.995 mo
180.398 442.995 li
180.398 404.495 li
266.22 404.495 li
266.22 442.995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
181.502 406.313 mo
181.502 441.696 li
264.465 441.696 li
183.406 439.446 li
181.502 406.313 li
cp
0 .217746 .788052 0 cmyk
f
181.915 405.688 mo
264.767 405.688 li
264.767 441.268 li
262.344 407.765 li
181.915 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 442.995 mo
266.22 442.995 li
266.22 404.495 li
352.041 404.495 li
352.041 442.995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
267.453 406.313 mo
267.453 441.696 li
350.415 441.696 li
269.356 439.446 li
267.453 406.313 li
cp
0 .217746 .788052 0 cmyk
f
267.865 405.688 mo
350.717 405.688 li
350.717 441.268 li
348.294 407.765 li
267.865 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 442.995 mo
352.041 442.995 li
352.041 404.495 li
437.863 404.495 li
437.863 442.995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
353.297 406.313 mo
353.297 441.696 li
436.26 441.696 li
355.201 439.446 li
353.297 406.313 li
cp
0 .217746 .788052 0 cmyk
f
353.709 405.688 mo
436.561 405.688 li
436.561 441.268 li
434.139 407.765 li
353.709 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 442.995 mo
437.863 442.995 li
437.863 404.495 li
523.686 404.495 li
523.686 442.995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
439.141 406.313 mo
439.141 441.696 li
522.104 441.696 li
441.045 439.446 li
439.141 406.313 li
cp
0 .217746 .788052 0 cmyk
f
439.553 405.688 mo
522.404 405.688 li
522.404 441.268 li
519.982 407.765 li
439.553 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 442.995 mo
523.686 442.995 li
523.686 404.495 li
609.507 404.495 li
609.507 442.995 li
cp
.00598154 .0863661 .414313 0 cmyk
f
525.197 406.313 mo
525.197 441.696 li
608.16 441.696 li
527.102 439.446 li
525.197 406.313 li
cp
0 .217746 .788052 0 cmyk
f
525.609 405.688 mo
608.461 405.688 li
608.461 441.268 li
606.039 407.765 li
525.609 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 443.021 mo
0 481.52 li
51.6656 481.52 li
51.6656 443.021 li
0 443.021 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.42139 444.88 mo
1.42139 480.262 li
50.0586 480.262 li
3.3252 478.013 li
1.42139 444.88 li
cp
0 .217746 .788052 0 cmyk
f
1.50537 444.255 mo
50.3692 444.255 li
50.3692 479.833 li
47.9463 446.331 li
1.50537 444.255 li
cp
.00192264 .0224613 .10486 0 cmyk
f
137.487 481.52 mo
51.6656 481.52 li
51.6656 443.021 li
137.487 443.021 li
137.487 481.52 li
cp
.00598154 .0863661 .414313 0 cmyk
f
53.0552 444.985 mo
53.0552 480.368 li
136.018 480.368 li
54.959 478.118 li
53.0552 444.985 li
cp
0 .217746 .788052 0 cmyk
f
53.4673 444.36 mo
136.319 444.36 li
136.319 479.94 li
133.896 446.438 li
53.4673 444.36 li
cp
.00192264 .0224613 .10486 0 cmyk
f
223.309 481.52 mo
137.487 481.52 li
137.487 443.021 li
223.309 443.021 li
223.309 481.52 li
cp
.00598154 .0863661 .414313 0 cmyk
f
138.793 444.985 mo
138.793 480.368 li
221.755 480.368 li
140.697 478.118 li
138.793 444.985 li
cp
0 .217746 .788052 0 cmyk
f
139.205 444.36 mo
222.057 444.36 li
222.057 479.94 li
219.634 446.438 li
139.205 444.36 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 481.52 mo
223.309 481.52 li
223.309 443.021 li
309.131 443.021 li
309.131 481.52 li
cp
.00598154 .0863661 .414313 0 cmyk
f
224.531 444.985 mo
224.531 480.368 li
307.493 480.368 li
226.435 478.118 li
224.531 444.985 li
cp
0 .217746 .788052 0 cmyk
f
224.943 444.36 mo
307.795 444.36 li
307.795 479.94 li
305.372 446.438 li
224.943 444.36 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 481.52 mo
480.774 481.52 li
480.774 443.021 li
566.596 443.021 li
566.596 481.52 li
cp
.00598154 .0863661 .414313 0 cmyk
f
482.382 444.985 mo
482.382 480.368 li
565.344 480.368 li
484.285 478.118 li
482.382 444.985 li
cp
0 .217746 .788052 0 cmyk
f
482.794 444.36 mo
565.646 444.36 li
565.646 479.94 li
563.223 446.438 li
482.794 444.36 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 481.52 mo
566.596 481.52 li
566.596 443.021 li
652.418 443.021 li
652.418 481.52 li
cp
.00598154 .0863661 .414313 0 cmyk
f
567.906 444.985 mo
567.906 480.368 li
650.869 480.368 li
569.811 478.118 li
567.906 444.985 li
cp
0 .217746 .788052 0 cmyk
f
568.318 444.36 mo
651.171 444.36 li
651.171 479.94 li
648.748 446.438 li
568.318 444.36 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 443.021 mo
652.418 443.021 li
652.418 481.52 li
692.982 481.52 li
692.982 443.021 li
cp
.00598154 .0863661 .414313 0 cmyk
f
653.541 445.092 mo
653.541 480.474 li
691.873 480.474 li
655.444 478.225 li
653.541 445.092 li
cp
0 .217746 .788052 0 cmyk
f
653.541 444.467 mo
691.971 444.467 li
691.971 480.046 li
689.547 446.544 li
653.541 444.467 li
cp
.00192264 .0224613 .10486 0 cmyk
f
10.1333 406.313 mo
10.1333 441.696 li
93.0957 441.696 li
12.0372 439.446 li
10.1333 406.313 li
cp
0 .217746 .788052 0 cmyk
f
10.5455 405.688 mo
93.3975 405.688 li
93.3975 441.268 li
90.9747 407.765 li
10.5455 405.688 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 481.494 mo
0 519.993 li
8.75486 519.993 li
8.75486 481.494 li
0 481.494 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.49707 482.714 mo
1.49707 518.624 li
7.65916 518.624 li
2.45313 517.03 li
1.49707 482.714 li
cp
0 .217746 .788052 0 cmyk
f
2.02832 482.714 mo
7.55326 482.714 li
7.55326 518.624 li
6.06546 483.563 li
2.02832 482.714 li
cp
.00192264 .0224613 .10486 0 cmyk
f
94.5762 519.993 mo
8.75486 519.993 li
8.75486 481.494 li
94.5762 481.494 li
94.5762 519.993 li
cp
.00262455 .156649 .612695 0 cmyk
f
91.5762 516.993 mo
11.7549 516.993 li
11.7549 484.494 li
91.5762 484.494 li
91.5762 516.993 li
cp
8.75486 481.494 mo
8.75486 519.993 li
94.5762 519.993 li
94.5762 481.494 li
8.75486 481.494 li
cp
0 .217746 .788052 0 cmyk
f
180.398 519.993 mo
94.5762 519.993 li
94.5762 481.494 li
180.398 481.494 li
180.398 519.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
95.9776 483.339 mo
95.9776 518.722 li
178.94 518.722 li
97.8814 516.472 li
95.9776 483.339 li
cp
0 .217746 .788052 0 cmyk
f
96.3897 482.714 mo
179.242 482.714 li
179.242 518.294 li
176.819 484.791 li
96.3897 482.714 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 519.993 mo
180.398 519.993 li
180.398 481.494 li
266.22 481.494 li
266.22 519.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
181.822 483.339 mo
181.822 518.722 li
264.784 518.722 li
183.726 516.472 li
181.822 483.339 li
cp
0 .217746 .788052 0 cmyk
f
182.234 482.714 mo
265.086 482.714 li
265.086 518.294 li
262.663 484.791 li
182.234 482.714 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 519.993 mo
266.22 519.993 li
266.22 481.494 li
352.041 481.494 li
352.041 519.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
267.666 483.339 mo
267.666 518.722 li
350.629 518.722 li
269.57 516.472 li
267.666 483.339 li
cp
0 .217746 .788052 0 cmyk
f
268.078 482.714 mo
350.93 482.714 li
350.93 518.294 li
348.508 484.791 li
268.078 482.714 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 519.993 mo
523.686 519.993 li
523.686 481.494 li
609.507 481.494 li
609.507 519.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
524.773 483.339 mo
524.773 518.722 li
607.736 518.722 li
526.678 516.472 li
524.773 483.339 li
cp
0 .217746 .788052 0 cmyk
f
525.186 482.714 mo
608.038 482.714 li
608.038 518.294 li
605.615 484.791 li
525.186 482.714 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 481.494 mo
609.507 481.494 li
609.507 519.993 li
692.982 519.993 li
692.982 481.494 li
cp
.00598154 .0863661 .414313 0 cmyk
f
611.043 483.339 mo
611.043 518.722 li
691.453 518.722 li
612.947 516.472 li
611.043 483.339 li
cp
0 .217746 .788052 0 cmyk
f
611.346 482.714 mo
691.863 482.714 li
691.863 518.294 li
689.44 484.791 li
611.346 482.714 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 520.019 mo
0 558.519 li
51.6656 558.519 li
51.6656 520.019 li
0 520.019 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.42139 521.905 mo
1.42139 557.288 li
50.0586 557.288 li
3.3252 555.038 li
1.42139 521.905 li
cp
0 .217746 .788052 0 cmyk
f
1.50537 521.28 mo
50.3692 521.28 li
50.3692 556.859 li
47.9463 523.356 li
1.50537 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
137.487 558.519 mo
51.6656 558.519 li
51.6656 520.019 li
137.487 520.019 li
137.487 558.519 li
cp
.00598154 .0863661 .414313 0 cmyk
f
53.0557 521.905 mo
53.0557 557.288 li
136.018 557.288 li
54.9595 555.038 li
53.0557 521.905 li
cp
0 .217746 .788052 0 cmyk
f
53.4678 521.28 mo
136.32 521.28 li
136.32 556.859 li
133.897 523.356 li
53.4678 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
223.309 558.519 mo
137.487 558.519 li
137.487 520.019 li
223.309 520.019 li
223.309 558.519 li
cp
.00598154 .0863661 .414313 0 cmyk
f
138.687 521.905 mo
138.687 557.288 li
221.65 557.288 li
140.591 555.038 li
138.687 521.905 li
cp
0 .217746 .788052 0 cmyk
f
139.1 521.28 mo
221.952 521.28 li
221.952 556.859 li
219.529 523.356 li
139.1 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 558.519 mo
223.309 558.519 li
223.309 520.019 li
309.131 520.019 li
309.131 558.519 li
cp
.00598154 .0863661 .414313 0 cmyk
f
224.851 521.905 mo
224.851 557.288 li
307.813 557.288 li
226.754 555.038 li
224.851 521.905 li
cp
0 .217746 .788052 0 cmyk
f
225.263 521.28 mo
308.115 521.28 li
308.115 556.859 li
305.692 523.356 li
225.263 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 558.519 mo
309.131 558.519 li
309.131 520.019 li
394.953 520.019 li
394.953 558.519 li
cp
.00598154 .0863661 .414313 0 cmyk
f
310.588 521.905 mo
310.588 557.288 li
393.551 557.288 li
312.492 555.038 li
310.588 521.905 li
cp
0 .217746 .788052 0 cmyk
f
311 521.28 mo
393.853 521.28 li
393.853 556.859 li
391.43 523.356 li
311 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 558.519 mo
480.774 558.519 li
480.774 520.019 li
566.596 520.019 li
566.596 558.519 li
cp
.00598154 .0863661 .414313 0 cmyk
f
482.171 521.905 mo
482.171 557.288 li
565.133 557.288 li
484.074 555.038 li
482.171 521.905 li
cp
0 .217746 .788052 0 cmyk
f
482.583 521.28 mo
565.436 521.28 li
565.436 556.859 li
563.012 523.356 li
482.583 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 558.519 mo
566.596 558.519 li
566.596 520.019 li
652.418 520.019 li
652.418 558.519 li
cp
.00598154 .0863661 .414313 0 cmyk
f
567.803 521.905 mo
567.803 557.288 li
650.766 557.288 li
569.707 555.038 li
567.803 521.905 li
cp
0 .217746 .788052 0 cmyk
f
568.215 521.28 mo
651.066 521.28 li
651.066 556.859 li
648.645 523.356 li
568.215 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 520.019 mo
652.418 520.019 li
652.418 558.519 li
692.982 558.519 li
692.982 520.019 li
cp
.00598154 .0863661 .414313 0 cmyk
f
653.541 521.905 mo
653.541 557.288 li
691.873 557.288 li
655.444 555.038 li
653.541 521.905 li
cp
0 .217746 .788052 0 cmyk
f
653.541 521.28 mo
691.971 521.28 li
691.971 556.859 li
689.547 523.356 li
653.541 521.28 li
cp
.00192264 .0224613 .10486 0 cmyk
f
0 558.493 mo
0 596.993 li
8.75486 596.993 li
8.75486 558.493 li
0 558.493 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.29199 560.014 mo
1.29199 595.924 li
7.45406 595.924 li
2.24805 594.33 li
1.29199 560.014 li
cp
0 .217746 .788052 0 cmyk
f
1.82324 560.014 mo
7.34816 560.014 li
7.34816 595.924 li
5.86036 560.864 li
1.82324 560.014 li
cp
.00192264 .0224613 .10486 0 cmyk
f
94.5762 596.993 mo
8.75486 596.993 li
8.75486 558.493 li
94.5762 558.493 li
94.5762 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
9.92086 560.472 mo
9.92086 595.854 li
92.8833 595.854 li
11.8247 593.605 li
9.92086 560.472 li
cp
0 .217746 .788052 0 cmyk
f
10.333 559.847 mo
93.1851 559.847 li
93.1851 595.425 li
90.7622 561.923 li
10.333 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
180.398 596.993 mo
94.5762 596.993 li
94.5762 558.493 li
180.398 558.493 li
180.398 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
95.8716 560.472 mo
95.8716 595.854 li
178.834 595.854 li
97.7754 593.605 li
95.8716 560.472 li
cp
0 .217746 .788052 0 cmyk
f
96.2837 559.847 mo
179.136 559.847 li
179.136 595.425 li
176.713 561.923 li
96.2837 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
266.22 596.993 mo
180.398 596.993 li
180.398 558.493 li
266.22 558.493 li
266.22 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
181.822 560.472 mo
181.822 595.854 li
264.785 595.854 li
183.726 593.605 li
181.822 560.472 li
cp
0 .217746 .788052 0 cmyk
f
182.234 559.847 mo
265.086 559.847 li
265.086 595.425 li
262.664 561.923 li
182.234 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
352.041 596.993 mo
266.22 596.993 li
266.22 558.493 li
352.041 558.493 li
352.041 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
267.242 560.472 mo
267.242 595.854 li
350.204 595.854 li
269.145 593.605 li
267.242 560.472 li
cp
0 .217746 .788052 0 cmyk
f
267.654 559.847 mo
350.506 559.847 li
350.506 595.425 li
348.083 561.923 li
267.654 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
437.863 596.993 mo
352.041 596.993 li
352.041 558.493 li
437.863 558.493 li
437.863 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
353.192 560.472 mo
353.192 595.854 li
436.154 595.854 li
355.096 593.605 li
353.192 560.472 li
cp
0 .217746 .788052 0 cmyk
f
353.604 559.847 mo
436.457 559.847 li
436.457 595.425 li
434.033 561.923 li
353.604 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
523.686 596.993 mo
437.863 596.993 li
437.863 558.493 li
523.686 558.493 li
523.686 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
439.249 560.472 mo
439.249 595.854 li
522.211 595.854 li
441.152 593.605 li
439.249 560.472 li
cp
0 .217746 .788052 0 cmyk
f
439.661 559.847 mo
522.514 559.847 li
522.514 595.425 li
520.09 561.923 li
439.661 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
609.507 596.993 mo
523.686 596.993 li
523.686 558.493 li
609.507 558.493 li
609.507 596.993 li
cp
.00598154 .0863661 .414313 0 cmyk
f
524.881 560.472 mo
524.881 595.854 li
607.844 595.854 li
526.785 593.605 li
524.881 560.472 li
cp
0 .217746 .788052 0 cmyk
f
525.293 559.847 mo
608.145 559.847 li
608.145 595.425 li
605.723 561.923 li
525.293 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 558.493 mo
609.507 558.493 li
609.507 596.993 li
692.982 596.993 li
692.982 558.493 li
cp
.00598154 .0863661 .414313 0 cmyk
f
610.832 560.472 mo
610.832 595.854 li
691.557 595.854 li
612.736 593.605 li
610.832 560.472 li
cp
0 .217746 .788052 0 cmyk
f
611.344 559.847 mo
691.865 559.847 li
691.865 595.425 li
689.442 561.923 li
611.344 559.847 li
cp
.00192264 .0224613 .10486 0 cmyk
f
480.774 615.987 mo
480.774 597.018 li
394.953 597.018 li
394.953 615.987 li
480.774 615.987 li
cp
.00262455 .156649 .612695 0 cmyk
f
220.309 324.497 mo
54.6656 324.497 li
54.6656 286.022 li
11.7549 286.022 li
11.7549 253.522 li
177.398 253.522 li
177.398 291.997 li
220.309 291.997 li
220.309 324.497 li
cp
180.398 288.997 mo
180.398 250.522 li
137.487 250.522 li
51.6656 250.522 li
8.75486 250.522 li
8.75486 289.022 li
51.6656 289.022 li
51.6656 327.497 li
94.5762 327.497 li
180.398 327.497 li
223.309 327.497 li
223.309 288.997 li
180.398 288.997 li
cp
0 .217746 .788052 0 cmyk
f
689.982 440.021 mo
612.507 440.021 li
612.507 407.521 li
655.418 407.521 li
655.418 368.996 li
689.982 368.996 li
689.982 440.021 li
cp
652.418 365.996 mo
652.418 404.521 li
609.507 404.521 li
609.507 443.021 li
652.418 443.021 li
692.982 443.021 li
692.982 365.996 li
652.418 365.996 li
cp
f
689.982 93.4995 mo
569.596 93.4995 li
569.596 55.0253 li
526.686 55.0253 li
526.686 22.5258 li
569.596 22.5258 li
569.596 3 li
649.418 3 li
649.418 22.5258 li
689.982 22.5258 li
689.982 93.4995 li
cp
652.418 19.5258 mo
652.418 0 li
566.596 0 li
566.596 19.5258 li
523.686 19.5258 li
523.686 58.0253 li
566.596 58.0253 li
566.596 96.4995 li
609.507 96.4995 li
692.982 96.4995 li
692.982 19.5258 li
652.418 19.5258 li
cp
f
391.953 16.5258 mo
312.131 16.5258 li
312.131 3 li
391.953 3 li
391.953 16.5258 li
cp
309.131 0 mo
309.131 19.5258 li
394.953 19.5258 li
394.953 0 li
309.131 0 li
cp
f
434.863 131.999 mo
355.041 131.999 li
355.041 99.4995 li
434.863 99.4995 li
434.863 131.999 li
cp
352.041 96.4995 mo
352.041 134.999 li
437.863 134.999 li
437.863 96.4995 li
352.041 96.4995 li
cp
f
563.596 324.521 mo
483.774 324.521 li
483.774 292.022 li
563.596 292.022 li
563.596 324.521 li
cp
480.774 289.022 mo
480.774 327.521 li
566.596 327.521 li
566.596 289.022 li
480.774 289.022 li
cp
f
349.041 362.996 mo
269.22 362.996 li
269.22 330.497 li
349.041 330.497 li
349.041 362.996 li
cp
266.22 327.497 mo
266.22 365.996 li
352.041 365.996 li
352.041 327.497 li
266.22 327.497 li
cp
f
477.774 612.987 mo
397.953 612.987 li
397.953 600.018 li
477.774 600.018 li
477.774 612.987 li
cp
394.953 597.018 mo
394.953 615.987 li
480.774 615.987 li
480.774 597.018 li
394.953 597.018 li
cp
f
51.6656 615.987 mo
51.6656 597.018 li
0 597.018 li
0 615.987 li
51.6656 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
1.10254 598.397 mo
1.10254 614.659 li
50.168 614.659 li
3.00635 612.409 li
1.10254 598.397 li
cp
0 .217746 .788052 0 cmyk
f
1.40234 598.306 mo
50.4751 598.306 li
50.4751 614.653 li
48.0523 600.383 li
1.40234 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
137.487 615.987 mo
137.487 597.018 li
51.6656 597.018 li
51.6656 615.987 li
137.487 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
52.8428 598.397 mo
52.8428 614.659 li
136.437 614.659 li
54.7466 612.409 li
52.8428 598.397 li
cp
0 .217746 .788052 0 cmyk
f
53.4615 598.306 mo
136.532 598.306 li
136.532 614.653 li
134.109 600.383 li
53.4615 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
223.309 615.987 mo
223.309 597.018 li
137.487 597.018 li
137.487 615.987 li
223.309 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
138.687 598.397 mo
138.687 614.659 li
222.281 614.659 li
140.59 612.409 li
138.687 598.397 li
cp
0 .217746 .788052 0 cmyk
f
139.305 598.306 mo
222.375 598.306 li
222.375 614.653 li
219.953 600.383 li
139.305 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
309.131 615.987 mo
309.131 597.018 li
223.309 597.018 li
223.309 615.987 li
309.131 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
224.318 598.397 mo
224.318 614.659 li
307.912 614.659 li
226.222 612.409 li
224.318 598.397 li
cp
0 .217746 .788052 0 cmyk
f
224.937 598.306 mo
308.007 598.306 li
308.007 614.653 li
305.584 600.383 li
224.937 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
394.953 615.987 mo
394.953 597.018 li
309.131 597.018 li
309.131 615.987 li
394.953 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
310.162 598.397 mo
310.162 614.659 li
393.756 614.659 li
312.066 612.409 li
310.162 598.397 li
cp
0 .217746 .788052 0 cmyk
f
310.781 598.306 mo
393.852 598.306 li
393.852 614.653 li
391.428 600.383 li
310.781 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
566.596 615.987 mo
566.596 597.018 li
480.774 597.018 li
480.774 615.987 li
566.596 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
481.85 598.397 mo
481.85 614.659 li
565.443 614.659 li
483.754 612.409 li
481.85 598.397 li
cp
0 .217746 .788052 0 cmyk
f
482.469 598.306 mo
565.539 598.306 li
565.539 614.653 li
563.115 600.383 li
482.469 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
652.418 615.987 mo
652.418 597.018 li
566.596 597.018 li
566.596 615.987 li
652.418 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
567.906 598.397 mo
567.906 614.659 li
651.5 614.659 li
569.81 612.409 li
567.906 598.397 li
cp
0 .217746 .788052 0 cmyk
f
568.524 598.306 mo
651.595 598.306 li
651.595 614.653 li
649.172 600.383 li
568.524 598.306 li
cp
.00192264 .0224613 .10486 0 cmyk
f
692.982 615.987 mo
692.982 597.018 li
652.418 597.018 li
652.418 615.987 li
692.982 615.987 li
cp
.00598154 .0863661 .414313 0 cmyk
f
653.755 598.304 mo
653.755 614.564 li
691.66 614.564 li
655.658 612.315 li
653.755 598.304 li
cp
0 .217746 .788052 0 cmyk
f
654.156 598.212 mo
691.865 598.212 li
691.865 614.559 li
689.442 600.288 li
654.156 598.212 li
cp
.00192264 .0224613 .10486 0 cmyk
f
1.75684 2.71289 mo
1.75684 18.2876 li
49.3472 18.2876 li
3.66065 16.038 li
1.75684 2.71289 li
cp
0 .217746 .788052 0 cmyk
f
2.79541 1.32812 mo
50.2124 1.32812 li
50.2124 18.2876 li
47.7896 3.40478 li
2.79541 1.32812 li
cp
.00192264 .0224613 .10486 0 cmyk
f
54.3658 2.71289 mo
54.3658 18.2876 li
135.702 18.2876 li
56.2696 16.038 li
54.3658 2.71289 li
cp
0 .217746 .788052 0 cmyk
f
55.4043 1.32812 mo
136.221 1.32812 li
136.221 18.2876 li
133.798 3.40478 li
55.4043 1.32812 li
cp
.00192264 .0224613 .10486 0 cmyk
f
481.986 2.71289 mo
481.986 18.2876 li
563.322 18.2876 li
483.891 16.038 li
481.986 2.71289 li
cp
0 .217746 .788052 0 cmyk
f
484.236 1.32812 mo
565.053 1.32812 li
565.053 18.2876 li
562.629 3.40478 li
484.236 1.32812 li
cp
.00192264 .0224613 .10486 0 cmyk
f
610.936 253.072 mo
610.936 287.856 li
690.924 287.856 li
612.84 285.606 li
610.936 253.072 li
cp
0 .217746 .788052 0 cmyk
f
611.453 252.38 mo
691.649 252.38 li
691.649 287.337 li
689.227 254.457 li
611.453 252.38 li
cp
.00192264 .0224613 .10486 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 17.0.0%%For: (Apple Computer) ()%%Title: (81-1013tm-cart-backgrounds.eps)%%CreationDate: 1/13/14 5:59 PM%%Canvassize: 16383%AI9_DataStream%Gb",KGs`7Wp\47`GRnp_;4u4K!%Oh'U*p;W?cCG';!ER;m_+)Lpq?CaS7H5pb[_LC$AD^Q/VQ"&amr"ucB;]R(Un^cDR7kVh<OsN%<\Oo^QDPEKf.F'B$]Bor>Pm8B9Mnbh=#D\&;R@.gK#CD]`EuZ*U88cs"o0X]`i.p?LO8u+_]'$,]lpSD==]Vcf=Q_qoi$*507<KI%mG:&8Mkt:^W7G^1[9gUH*u:rPJi*F^A9pIje;t8l8$[QMh#YZL2]P/DJ0cII/AM#YRP+uG7GCe7+](V^[2bb8U1fu"^UR*AUTjB5%h`GZaLAgtQea%[2"Dg]b(+o0o];SXhPd=CeiP-[`=K$Hlohg',CK"W?i7Hq_!cV6ols:fC5VcIGL#dr&q#AaV<$rpos/i<r5>)dl%%=ct:HGL`Cm-RfW#`V$WP_*>\;pA+A-LbBZ8n-BnHC]t;IHV82F]/J!>Y(Qh3hU9P&sAjt?m9ks%ATj`/mrRr%L`Ho/_GdeGn_59%K]$KO,Jj8hjo)MdGj3bJ?D#)@l44D/rr[X#="CkBAeZfHKO8Pd52RHi^&InHCBtr\+j$P\^$.Df2KV4*V:Mf5_8%q#r1jW/lhsb#%#U?n3*[*X]"\8))]cD6=lG#J%S16*upVQ5;p-+SLY%k+CF<&8R@A>o]>u6Hj>>V#5"igt$1ou;/CE1,RDrcS!Jc]b=D@Zs?DSL>J%lE1.uX1%$7;>m6HC9g-BCB]Lm+K[%QgrBjf[(=WTiR$oeeQ9/Rnf)Ie.)e+M["-'#;<PGnDdg+h^_]Hf'YV![PFu-Z&*knZ<#lnL%degMXom>m3()@Y[VsF-,ZLFdXim2X*T^"RelT.5[FaU4ToP(F^\S3\>_GlhTIp!PaZ7J[\=g_GKdrdC)lXCbKraB]r`Dj!uWUMkE%M5eX/9N<]Tc>jepPfoGk<l:iCRUopq=q.+UC,?I'0s*+2%kWo-`LObc*C_+L`)PA9r/%DW9gMG:1Md[&`&-*jr/'eNH@k:u2W7I0%$X89KOV@+0ar+E:5I'&>NDs^-Q:ZFeQB/#L?2,)^e7qM^nA1RB5,Q"aHO52MS@%Cbp9a7pDR=MeH%8bRK)WYefKT4iS1&ureas_J%%)4M3[P'n5p'T'&mDGRk(Uf@`O$@@'Ob,eP't+X&;AA@DU&@U,`tF"ZJ2IkW:Oj=b+742E7Je\#(YWn5H`T60(G1to%e-2AJq'-l%>8N5lC`VZ8Xenn!IJ=ISdIE4`UO>K#i_N7#X]nm97WpJ0B[>'=ki`MrE%k=Ed=sNV,DD/3?sWu'dXJ+%UV0FGV>Z-+%hK'$7dH)6%K$l)lR\)dAs(K[AbbV#%@SZfTEi>+MFSrGt:@g"f#.'T>XIu3<fVbK+)#%kE@;[uXJsjn\%XOQ%J2I[[&p(D9#jN>X2^k$`V)_OU%+oh&$8k%;1VePc0qkjB%KDs-0l+_p@e"d]O:&im)rL85aJ$A^0IuY2,mJ-]R-2N:CdskS+oPaFts",d&.[7fal+^turlr1A5:-4t%jZ-e*5:Nc-n),kq%IMW'Z=0&7j?M8r0%JV3<W"qOF3ie_N2_aMn`R<;Ju(J==No]9'n>8YiOK!H/lruNP*\:`gkhP4I)Bke2^nu1%,JP`&M>f+&5hR#(13,IPKuos#Xr@0am7o=07X.Ha'?"!Kn2[f?:@ShBbA'mIHQM<].JO\!^P,huAb-mPF^X>.*5f#s08%S:CD>gj%iuL75]O^X;koB_+_D`o*Jch?(MGaR;MO9KsIFf\)iU#7Wo1R67iMRU>171AsH]=N`gkUhGE?8HGj%G.Y%LLJ[gsHgV'P!b']Nq\R%M0#6G>nU&V^0NaS:caho'J_ZniP<R$P^/ekn`MhM9+9_QlpsGoq3/rE-64^'>3(M$p^Y?T,N,%:aWg\T+OAMIU77Q4Mh<\A,)BOe%6ed"qHo(<<i_W@oSb8,kd*$f'FGXN@ATcF)PVBk/[ZJ5[-#h2S*L#IDj;FD:CPZ^sj=OM%oCTXGG?'qQm<L6AlXeb\SMW\[F1>7J%;7e1oC$%r<A[Gb6gs975;n/eH>k,@HSEH3]<83$@]&V"3?eZOkF6VI;I^Tj!Q8p>kQ:3)f2=._Y/PK>:AMRCn94Y*"m+[ekc%"nC%NNFM;;<+5qoQa3ea2GS.b*JPJ-APd1FN@r*\;@cfEcG$!k<_niE\EF+(!eT8[;_/:\\>&j?44Khl7YuDDp[uhJORK2=Wnubcbm"$%:Z:%J_%Tli8%o-I`?HaTj=/%eO<SIdgj9V.G/_3>[k*4P:FUW3Z"j1N:`"i8;C3-hmgQj?X/@p\i\MfnL;`;)mS[MSC>*_pVIiK<%UtiViQ"pI7Be>J1IpOVeado8H:0)Ni1H42!Z0teek?9rWI@cfMD*1?O#O*3T?,&Bl9!@?<krE?hb'<FKo;)%X/g7)N;CPXtbi^]U%=rl]\e<Qkl4I>66b!q'R;+1uCofLdJ?]L.Gf!_Y\1V>MAUchMXhH>`G+.4&Y^+VFECaNYTb-#_t-e0BcPP)J&51L9\,<V=<cm0+&%-8&HSm4``nm;eOFS!RU;Od&q?YE^kaBDFokc\8YXb<\<bZ9DFfH'U(FV4VDFF0*!CR_+m)_:MV\P$sf(hi-@@fEdU4\QXfV/4J8B%*;Z`MV*c"'L3IBi[-&Uhq)NESJa9_F;'L9,l17Pg\FS#k[N#7(7uCc!?TE"r<J<F[H(OTVc,f9Y5'QdK6@RW@asC<-ATB)6N=fep%@Z%P-1Y8n]0bg*'Gt(poQ91NZCXeS(a',?qeaN)a3KUPQb"1lah"/--99C_o-110+&W>fnMaP?P:"3/?kPfBK0rjH=PC,\md9%A4%d<"!=QMd6lCL_;pU8cQQOnQ>-K^8JU=#4pH&]+1S7)'Vr.4N]:F*K'PW$OZhi-e0,Tgb6%6YrSi[>?ZR1US;"\!'t'PK=t#RA+pp%jU2%TK[EcHf.4#7Jd6hX1AmS6T?Fm_ij5SU.=Y+<9BAY.<"3%SJ*P>nh\."(&uY,/$gDaRU\i,Ccc_FkCZ7/B@4+:)56I?&*?s"=%lgJR%Z&ap!Zq,)GKMBa_qi_r_aXf[*OqdrY7t*$:*A7/U.9eLn'5_rVk<SHX@e1rTZ,o*5[1!Q+q3?17'#qhK_)j`&2*)qWCPo;/%,d&H(FFkIp3=%3A:0.id]WsOqP<WDVPb^j6;o8-^IU5Yq45ma"".md]Sf@^9CDF5Y:[G<P1-^VaB#:V^T;QG7=WF_hjBC4GIJ/iM%6E^8=1I&X</O7kpJp&Jtm,e'4LaC=7UcB5TcdYmW3&&I=RNdGAespH7j6nZB$aU_V,\pst2pV?rn^-L?M-q+tpu<[>muTn`8BG/\%i)%Vh>4D&NI]#p>rMa]*GaKYeZfEP%8N[Rrm!$N('qDKMI*@8R@*h8t53V3OW@+(0Ll\$/pfq,`9u0?*j3RZF'%ZMEb(a)2@8Y/%%)__H.8aI28$,1KBk4+Kr.4qbeK4B9ql&[7h9*/GTGJoi;,2'm*.brnGE25O+\Ml%m#E2uSY/$c4Qhh"YMmu81-fSX>rb5s,X@#C"%M"b0>BZMVC'!R<tF7Sjan6?gnBtI==*?"CQ'1[^t4LeglO/"R+MK`+hC.9569:$[((jq0&VL7<6BH5d*/eE@^N0Z"j6,*;5H*rLE%OqbqBP<Ben0?Elr7s><Z`uK#QasD9nLMGrmn;KCZnGA>R\r/P&;03NfgWckAnJ!]/WGKU&2VCrD7?E[("K;U@kml*AbAp#MNn>Z"%1P@lk7Hf1g1F5JS"$`5P2!e`_-)'ZRD]qOfLICB'.arGo8[GfCp0)3g[-%`WaHKYg8:JBZP?``n%l_7u,:m#Ba\HEH`[+hTUsB_H%[<.tWaiL%E1I:G,bf;%,:3doPEQPu%1sIRg;d'5M;mYacMa*9A%HPt7Ed25:n0M1MLWUlf3b$BfUF!W9-8m'j17Ln+Td_G=SoZ\E%=EThBPKOFq,aBt[k/pHq(.X?,?)1YAFQ=`3:Q3P08I2a3AsSSO4>Y\(f0A9GHZY3W8JV:"e<MGQK5?:^;P\;oBO$n^5g/jQnn;C.%c1@s^k@kPQZ1L]BrpnjTj]H!F_+7riRCC7i=VD[$OjtRa]oG:CGQtK6V!$%@V3[O=[h7ClfD\]sSj"gI)(j=\*Re@>1K;f+C!S$i%pE_gjb.\"6KX12gW.cTeGcgs@i%9@@<P0t&q1qH[U:q!*>LGYo^@a,(aX#%Pp)J-HDp/OZVELIm\!u;!$hQ;7$H2oNn$*3Oa\/4>%V=]J;rCja]#\@A36`fWPLjE$5'=ATq'o^Ebfh<&nV9Jm3V:[S4Sh;R+V'sO="nLFjkON[N49qk+P4Oe*H#h2NM9^2L%bD?0:A9i)%9g/05Wi'HD&uiDt3Q.XcQf>lari*BFaN)1-`&g&)<j]i&fV+X;KCb_0Q9NV8Z]KJZ,!'a"#O-IEermQ#2TdgRNl9ffX\$\,"CFrf%#<ME<5t=]0^d!$s>7+s!l"q?b3u;XC8NKePU+%jG?Mm?1?sZK_rZ0[YG@gW]`1n$,[=#6]oWjZCkgdaqG$6&'A>Y@=C=q]`1,t92%AG<82,;jmEV*+M,/c(]B,>:/`Uf&pMb,-D,)=1q07:t)/5>ipg$-8t$SbQXf[ADs0EB@.BBF/LeP^6li4=8/_Ur0%6cIM)Tks0%C%Itq@oI%TrPQF%cn]gq7,g]A0SjE\ZW/4t[s%_*`UC<^=;QusgpS%C[7?D_[6AKeQrd-'c98TToB%"55rq46u^9C-j.pE9hU+JJ/'%>2t+4YP"^eqKZBkcVhmqdkF3oD29cgaZER<H:5oJ-0_OSPFhY/kJt'u3uA'^c]n+obKT\T/S8/O6/6Mm:Ef?(7/Pf"pf!qc1tpQd%kD>s&PS"4o>gbpXR='d$Vq"]#`Ql`AL]r4K2;uuLA6R[^^*aet!L?l:cJ&Q/cSTJ<Z*hPIY,.DU=9i`6-]El6GY%;p8;ae;;T**W%VFu^>Le+S!s"%_5EC4&hF"]q?moQcDS`Jt(Y:#`j>S#%/*>mt\GAO(p;[1Rd*_a;EYSR%0I%E;bF)_IK_3_MP,@tN=1.HJ/Gj"'@%KD>A1F%FFkI`KS@^2r,<-nSZk1QX^8b.cC(87P9QEH5\bLWR])Nejthc%NJ^VE=9q.U.mdk>L+ZMaK'5%iNe=S\o$b8Og]e,T`EH%8U/PRq'F'a%'aoF5r'K.(oc&)03.l6S%'BWFbd>.i1nVoRRbp]p6;kX[?H&aftp41Cb?u]C7"Wt6p<'64iSXb*,r?9Frb&V(AN;@%imY"!>KYa#;+g#UYaC\";ZCFuN"cjVo%`L$ZrE@ZAA!UnVEAL%Vdg[)aWX_bZ'P#e(o`ka&;cJ0)0(-IZ0T[UoFsO$"_ee4SX:Vg%Gsl#O,_m5n8K=PPA%G#gLWF]We$iDLEP+*hFQ`bgf''AV3HA&=$I?R$^n7pV-oE>=@_$&!;P*(Ah++2br$V,N-DllF&p$QATJV_e%`[pO3P3:sfUt)0WElW&sb4Qd;WQFa9qE22!aZ.em$2S-kethIO,911=@p2ZM4c!%HRP)PQ8k*#(J*o^FVkcjs7omhXl%Cb2+^u+]%J!\)6mct@Wr>,,F,sG[<bY"#kSAh/=G?A+%:P+?QCtlhd@^Xt/(J`H:b.S;!*IJF2ML)J`C\LTgZg`20jM2^p0'J5$akoU,H]Yhh%`E-=u]Hp@DUV6@,*kge37Mjh8PMX/SWS'B,$6Qq#Yh*glcYF;>O+5"gNs\P@4n=<EI_>aji9r?oZ/3':Pfg/[Y4oU2I0_jTT>>_p%mYZ5:lZZHS9!*::p=d1fNbq=dGFO;Ip&7B<lb.JT>ON@64lj9)qAZ$UTr/`G7a&WtlOPV@F%@(0,Z6m"!q&pGK'L7[_H,FW2?tCD%qPRG89$?@@d(i_XpBt4(dGV*Ff^#q4[c4'D]2'bQ9KsJ-m#__4h(J)fGY*@9BM#'"E99cDeB'#P_cc,.Y.*/fdsh8TXOWCI+F,#o%7%[as@/]L5pY)`8LQ*[AZ<-K*>E-(8n9Zk]3k<'Y<1>HNEXC2S29is%ojQlsVfgdupKLthlpCbJ>2:NarI[s_kckW_FY7tbOCe`1%oa?g;@sD$!.1\b"jq3Du?F[2AVFu>;ToT[I]Vr6ld"I*#iNIsCKdWMLm(D^C4oD_9!`@GL&c"NU_0TPShbLckO&hrIqQ8f*ci]-3%ZLF[>n(/d5)J?0qZgW&,\Q3s\%8o*3L-LF-Z)&rY9<+^;4t8ZT!/B<.1!SVKp4t'lVpucY-)BhW4!YCPmO)5,aYoZ7XjaUbFsDT\%=5JfSD>9Z-rSOqao7+)^rpM_o]LUJS/Y)c9[B3b52-E:Aa96tLD%-a'9bJ(GH/hNO8#>pu=oCn9CfRO(h&&hlP,#%`,2%^Grp^89%ZA+_!I$uF`!s6bL4hHT/RG!2PqS90)]jE!tD[n3.8Ufc<6>SF3eFs0BFq0?LUq?1uFF+81(8r=C/K'X\LTS"O6YHa^YImS5An/EI%c>I,os#X"\pp><W7m`3cPT"0AD!s&N&?lM>FS?O1JEhDLbJ4DPf0Le0L4Q26o'phK)tb0,$Yk-$Y<tm`k1?<pX9u%02ehske^psD%/eD6"5cgU%WUM8b5STs:ZCb+/PJ[1O@%&$.F+\1E0O;B.AGdeaVNZHLFLChs?>FN?9r;`jGA].[/Z,MS.9fou/Z-(t1q/k7(=Rc`%@PVhP`K[801N,"MC,aaVb#S0R[@4n8f^f%8g';9`B()AlBKYFe4\ClI2b8SGf(K<cB#XYZ<QCQhd9ZRtf;*3oX*9H$`\f?u0C#=K%TN1Gu-',E9<*Xbt-Ne:S;X%CC4dnC^Qf`EA0Y-8nbc9DX3^1UDf_kI^Vsc7+#<->U[S`%%X^I,p]@UEek:G:Yi0T5Vm2V]R5M;<_%,MX*I4%_iu#"bPY4e8p'HjiLCPBt,.B[h)4-R&.?"IudP!s<JkY4o!s?M(g82oj:&kICA3j_e,0f,Y:cQY@5YEKdd-<E4U"2qH&,%o2L0.X\>s\o@3bhfsUk;2/3/=]iK?ePKT*ZB,kgGJNj0Zr8mk]BdC0"otE$'r4IR(X<M[F#JmP5k0M2Gc;l^Gp$@.J1flkeg8uMY%c?Jj`;SCs+Soq\SNf`%U&55(g<K>1KY$IMf](#gLr(BD+WI!+lCpF:CP$a(g7)j%D4_]fC<EF,8>'=s<b=f@eB0K5``p97CfQT8F%%EZ;Lhl>Q5Ett)2-Q-!.;<RgJAn4+tSlX(:X"V*M1[=29m@3Ug]j?&dms4rVNi(XPNA>6'q[dAShJA0l?l>cPH@,JMS,CN3]:L7?%HR$c5*6u1O1MN^LOL)*9pA,S<G^iihW]3)/s/ci'\)?o&D%]B"c3DLm5amV)CYD%DmB`D[.D0tj2b6\bhtl\rRouAi2f=!'D)tI_%XT71]o>J[0<4Z3KVE*?aZNBALSqPCq5g3t"2LE@/r"SmjN1m&L/2p-QA[c)[jjHkp_g0gcg"f>a4_P$[p\J7G-NF&2GY7e5hX,XV%"0YG%[EfFkM<28DJ4+R6ldF%8kI@s#U='rb[-J/3hfnReIW:"+MG>0oA]MMsg9N]`p'8h@E];8/ZEDoe.g5ke@_\q[YF05Q^ZEfO%K6/oKQHZoRUl6ZQhkX!E=d2n+g"+./cgpE\bj6n,ED5gJ?.tB1i(e89ccRe"agWSWUt'AGg>p\r#3b@>J*Oe4((!8F%.!k>id`Ag%L8,bpYF`EB(Mo5RRpM,WQ<_RJE5m%,a&Th#(j/:s&Ql1fI+kVc=HG,X\5idp^*U25Cm^Ufb1kMALp<-!XCeemYP62eU+k[;qAb:(%*0s69-<J]\I]nr&%$OXlYP)Uei+)44cQ_X%]DAdrh1B7!>EENmCJs?]h,Yna3;l4Vn8IN5;2s>7%DoZdgE:P/s3)BJo5,&j@CFs_%D%O2F9iR*VYR_pJ)eN+ph8XjSGuf`(NM5LEWGB3[i^sF&/_C>kUCB"0Qu;I?cEeY;mRE"KgL.`-@_NF`lDqjN,K+`Y(6)P&&L'^a%Ap1`.f_oci2F?J%94luhE\fX@1iC-!L`C9!fi`dI2F?I:\?eA]V\Ooq3Vtf,9V>NYm3Z/tQ"L?R]\fXEn$h8gq#&.=XKlL7`jF1f%;2*dGEAUCFgs&uAEk#"[rVD]3FSEhJ]"n'OK]?Vre!LNAF9,tO-O!ImX60P!/th>.l8f)J[1@r$!d.H'PDAYP`RA'Sh.lI:=.eX7%BeH">ib@Pn'-H?rRV&)fk")I9rTa0I&\sj]O?>>;r_Lh$lrMGFaFA>eh"I(@m'Zicg3`5`n"UhL^<BO`B(cE`g=Q4Ip5!][Diu7/%H_"L&iUckF'j#f,_?F7HOkGon<>ATlROh#a^SbNVm\s"jlFNi,<"j^1"o,1:n*n"#%gk7F4)h7ToM/TGj;2P$_X>:A%kDoX<oB-I%rFYI:J%^Q)UC"EnIZ%@V>E8<f?$5:RB]j-Lbj*Q)g'GD.Dt#?(IFh3,1+%6EFIr5dci!E1*$mNp:6JCHc0?2,b=6dJ+#gp2\NQ50%WR'@FT(Ab[)dL-fR]AZb_o\]YE2-FHh\r)/]O?i2E$L$7NffT:7\=&.r;i6gm:KV;k1,r5p+hD>Dt&$M>a-=#`b\[=BpS6g=)[r(%G&uI,QWmC#hV+?h\sc,?Da_P7#2_X(O&uSnp,le50dc%LlVH<%H,O_EZ+LjON\O1$=jJJSk>BBIPk+B?P'N:4*i5As.HOR%7k*Uu%b"H0iCn7)TEnldAo.rIH6Y:L^kDdM%jL^1K83EYfG#lK\^V+g&pJ5E"gTAr2+Zs+Ki4Y6*D2G.)H4<#ar>>3'^`^`Z`l-@_3+I?0%;!rH2_g47spkiXM]9DCFUq&SOG.EfWamHW7Bbl(gF<t6Xm<`/`*L$nL^"$u.:4);V[sDn0\DHtKlb.b\Ri!lL4.GBXVFaaGs4/\B%B18#hZ@0c")udqAk2;D/r;^lDRo98nX"tY@]o@pd`'M7Uo5[f66ndE5(%f'q85uOJ^>lEV2eZ;(0"_B:4oJTi,Q)/Cpn0V%55S["%D$GHLp@qRdqX4U?.!\MaG`HPF@HDB.Ib."Na4tknpKc!k(N\KQgim`i^'igs6%'Q`,D3K[k.Zbampb^sR/8N8X1jMX=>Hea0Ao(]%H9(J3N4JCgIN&6d6((kWd[rQWH;/GB-6C:TEGBSrO6!cS_nC@HdD9mVK[O^!NLs]Wc0B$@5BRqCXR>>C+3"6nl@4!-rt@omB<U'&%I4^pq/MhI+faYZ!-F\^dZg69*baeK4FtH_o:TS+d-Qnq//XcF0@Il!\1<Z7r.<Bo=arHr%S%X<Kq?DnJ,A(i6Z0(DbJE@)hY=n`L%d"B0JPEUPV`(Kd;Aj.VTI[Xf^%'H#s^-Roo^>!hb*M9^=nf@c!2,<1;1*?K7]([%_J*+`>AX)[e_;Vi9e9,X6h./T<23c)(6246V%R:eI?TBtk!TR)VVS9_[=fS&Ll]G7KIRGE`?R`on&1:c\A6Q,[n)X@;DnH;PWB%`ZKo\9pPJ2R'(bcLe"pB8^a1i_ZLJEu_.jQQBL%-X_*5`OR@(2K5%1!rbFgk+7+6*>EE3g-NW&SrI*dd0_r!f,MVRqe`O%A)Al_Q.6$=n#P=9;p;s=ij_2AC45R&aQka)k^/HQ=5K`B%[UhYoRWjcMbj6(Xh;5uP2/FQ62gH>]P9%*cGn+[!M6@t]Bl:/D]mE_iUWtIt[(l24_5Ft<14+IoMH%=7mnT:&^q3<bVrV"Jk?"S*%aOM`Km5gA=p<,OP]c>1:DamakPCB^!@s&roY.Of8Xd`/dLr\Rqe3>"^6#tg-\(PW/-R"Pu1oj7FJ,">C\bAp<[G?F_7![K?oD=>a%ZscFJ&`oteHk4WT2m0N9`:S_XUgr]!gOh]6;Nu'Xs'3*W%WoYOk.AuYUDl7@?c\l3jN]?SgL`2%Rd"m_Bl5`OD5N_9_q\jmgJ"l@%s+bEfCmFlUg.\tif2;6EkIJts2k$o5=T.#gRN"tBUIj$m\^>NrN@+64(eo;00_7c_Wd8a2VHe89)c#!o3.:/dR]$+1NqN-)>"uKd%`-T/hXL!3u+Bo#aJ`lE=brN];M>N^/ju<)']jBEDmi*CEDYB%jo=G+._&qD9`JVB=G3ueFDk+!I.&hDfDmY86fCHF3#K,H0hD%ch%?2^AK>VFHpH+BBI))M;9_\s#g)`0p"it?cEgmA1aNELPL'4Wr`orP=M@pL'qX*h4Z,,t.I6uD)*;sq-2c0CP=qc^(R7Qlgl,UAs#%'pks!5A,8eQF?bD*3Z4GA$.9.oN-Of0j?(KohXi^0BWl[;pXBTnRY%tf-N)jc=$rI1Ya72YB>1u/[&dteXQ,Eq5_1]pQ+MqZg_l.%$D!UV=3KKSE6N]8T<IR1o\QHQ:0%>-k]OR$.sjD!%-f?/-1`W<nJlV0AZi:3VQn>[Q>+k-^n7$9NFhOd^1pJV<WW(.Do/'1adqHt%f1@nWE;bf2Y$lIqq5X1W(J=@LCO"G#nm!Df,D9!U6'Yq8T3oWSli5J+[TO&h>XGI9hB5GE<l,@k@jXp^o;!XZe^aJ!2XPCSY@[=5%D!HXf<nFY4K5,"bZ--91o;1eWWrAVmb&34UFoE/ZftcPW8DbB5qgYaM2[K97F$n&$][eh/dYJj<Cu<6Z9)d%=HtP*G4hkjq.Y-a4%JQ;D8p6c]50-KR'AZs)_&m/m7nc+gO(/cn,8q+r<EIr;=]ZSI2r^RI=]LeS`ZT.Ppf5[iqH$-nSYtf6$`<!T[n5SC^[^e0"2[B7(%Qd&MT0L(/=ohu`6S2bm+DoM+5[q1V$I_C/ABCcsU`-e?2+.qQ%i6C+nNjhF5.#mpu,'^9=r](NRSTt*:X+(MI-%BD&\2eQQ@Jr/U%b@fOKV\QMn^ndA?Ek8T1`7K53cD]LM^HkcV(6#&`>u1m;FY(4nO/4?I9BtmZ93^#U7=gg?G`q^'?geJ"Ea4>_4(B2p:*$XL6Z9Of%re!jXZSUo6\Eo'0\bG"mJ3\9SQ.kUi0Y)+^7<(mZ2tKN8NS0Zm-ORW<)b1Z:gT#9nm5Dj@O!)P4b0esMG7Rf;.m$c\H-89dFnl7M%D_K,Qi6j!LrpTn@XrT&UH/7lddj9LZW*&m'eZ6SMq?@CS$^J^TF3s2W[(RT=;V58_)^Y!g:N[fH0.994[4MjSJtchG)Z<*K9\Y5-%Cu$sC(Of5(>;MD9C8tt[MImcEiDXHAD7oZ9)ub'c^\e5_56Y%9]IA7,VA,Iarj9F*$>hCX+hLmN1V$8'YsVXZ1:q5'hY)[kO0iTh%(trAeMPcO`\<`nR?PH3:]=I,TWb(r?>l)#B\Hg#9EUH,*@GO0HD]q_[fPADeC[!(Sk(PpeXO$/KUT6?!$*U2r;s5V(I"ou5VlHI&%o%mF"$UJ8U1I?8X2>j\7FYZNBc;92a:ECPSmMtuTaQEMBdm><,0_am:kqtpNcu^f2@=;SSkXk8&N)ok7QfIQo'CkUJM/j8m#*ST(%Z^:go"9GuVPdVVb*\BP=%Z^OkpBU"eM\2aRHBp,uemop$F[LN=\CJPWd:DYLK;?kN#N"r%l%\OGi`!$cD]?;r2!/IY]@T%:ZL1j=%[0TZ*$2t68T=2Zk*p(8HL!GB7"$[I@CS'aLd9tVmr2HZEPGHjbhmj\]8b3JS5;s)(#'EngE6SL4O`reanTf,9\P;08X)].kl/:Wp%).&<+Go@+FXi=)%`KmP>>t6[X:\MJJ41VJ=hXsDh&\dZ&>$Ihlcmi8GC/qFG5E]3SpHMts]2gKmCc&@"ZPo.;X-;&kpN8F8/?5_N%B!iq#Ij?WF]%[;2f]r--RW7+%K#4kSSIB`>Xj]sf)Q?7icO?oS7-mds+aH65[4hQa86pES3o7*t"Dqi#HFOX>j'L2Y5NE\f>[em6%9iF"Lnk7_TU#$k4pZh]hJR%#8:^d6;P0-ID*7cMol"T#_6*PH$&(:`CP]FJ7GC=GWqHn?=Q*s]#Yh/UR?N4rIE9R6^/6&+@@K!^d%D@M(cH]4a1SMQq1N@kRG2U!8Hlh)]r@=]<48g'D'dVle7=^f'/(jc/3s+km$YjW$Im8:+"/s:[-1qXY7ZZGmnNE9qohE;n0:VFVO%mp^AN.:K:EGtjM0*uOLE'0b:EqKPlYYk>L"U>K],mGl&`rHB+<]VJ_"V8rnTcV*$#;7diJiWF.MC;SH(jKQ[i_F`Bo^!X(?l?\0#%YhqMQ,S6U#iY'kT_cEJfDUeh\'bS`Gh]4C'r*o><Q+NtRRh>,p(HoMn\e=XGo:f6D<2*;5S4?+H#H!'<[L8qZYSTXfj_OAt#+ON?%R\;a`j'1Q@Jsr&X?Dq$5k%<SbgM<<H_(\f6gfTXaD8?LY%m;>i,JKnrZ%8[+*uZ&!`?C!(0C!sJQk!]:RY?<oJ)%n0r;sQBd-?SD%FZ-lg4,07"R;#%1,>NhBZ930V+Jr3JbMe$(IT[c0.#3DercVj<T#qho0]c'5;/`4/i7%6'%aiqH;X#EYCP=EIE/)%FePRY.G.bT'%G&7"j7gC`:l++Z;1RQQU94,&Qa7]/?G;3hCGi9edTT+-\!dY<8o7*Ic:*ILt<Z[m,:Bpg`h_6IOVkKbE3M[N-[!\0t5ihY<pA,Th%'-G<2+``@U7XTO7]AT9_j0M4Yht3@W*",R!p4eoZ*&R<pduL$tll?n'>Jj2VCG2%0I.E3Ec?\ps/)!'F.8i%I?dKFLGO#.u5r?,%%WJeiF2"4lmO\YHD;$_gY17DhUe"Z5l*afAAXJ!D6?#3D>"=LAp>ns-6rFASr84e-Tm(d:OGB6jEU7&ua3X*ES1*A5&qL5`7%Ycfh%Tn,A*8R[6nS@r[LM5bak:Hi//;6'dlG-MK32-7Y'mio)]1hE9oSl/(IQ61KI0TKPOC)2hZ(FjhEqYc'JL"X(Xh+&<'Oj6QoPhB-&%<Uab]$tbW40s!qrZ;r9L_9(U,#-H?,[m4X6$-<l@p'mKJN[/'%Ut,0ZUoP$)oLYMQQrlTshUm"dfEmn#U_Jep(SDhDMNlNl9GpHA%ntoU*?YjHAI^@\m[m3lja&Uc*_@p%*c?fHhKe&QJ("kL0/r")>Vo@.?kGRiUj/S90MOY^nG\*cL42$W+`^RN04';d81l^oGD<sTX%+]p7GVO$"$^o:VSaR09t>tWqpiWF?HX?UDs(/opj(JYmQ,S_'6C`9)pK`OAR%E&!>eBGkM'Z;qFg7lAS=\1Et2#=nDN$K2^4^6a+%?:M4a\&T\n:t4]hli!c.PcP7'XW9af@4u@5-E#s+O;nT9X%&,fC`1Dkb>gnfB26%U@^DUXi+SR;r^j;_-J^B/@!!C45$`oj!#cd@%j&/$L!'2?>R41B3MI#\XNYYW0,1O_#o,OQe)GCBO8iN;B>=EFPhYrd^r1Jj!oC_rd8hXTsDhtEA([;cZKTqsnb*GWlIkQ\2"i3n(%8?.,<$!5B)Pc#.:?'`cCo9`r=_ippl/rT@dY_]+kM&m,cd,=#p/7J"AOWmdrJjBb',XHJcfEQ9,Ao#oTgdt(<!p!#+-Ml!d+F>O[%WD5q=7`t4nBm^:C(aANSOehYf2fRZMUrlU,)]_Zk>'aO<-l,!ma+\Q;4p7GNYGHl4]6f#j.f?CpR8G!Obr>l%V@c-5["qoAP[R#U%:n+uBq0ejiQ!D2_n1:f`ejELcmO0UiaU?=n^g$[_o+g]$rq4ul?N7qO&s?rCp`[JR-uBc,o]o4NgC!Ukds#=lAeZUXJkS8ij=9h:%-K80fAeIa7$e;qC9,C$<AX@OB:MJa?fr5L:-/Xup?&:NuU9:_QDE[Dm4/i2H]`BXhFj]ma:4ifsFS0a&bSa;lFbp@Ch\;\mdK[CV%mZ-GBWp$iYGA9^25.nXbn117iW9cTup3C:I/Es>+fK;]FjU.ss6Rce,h`ab$*N;gu:k-n/^D_oF5j1!B6,uK9/$cdPE_,Fr2,aD/%\4\>MSTl6Tr9tt',"scI<AK]Rm)F4\/e5O)gCZ;F0SE5#ehs%;HE+f,lN40)DMgEkA:;gtq?%74dn`br:944FeO[Jd6#4#cL][-I%ms#f$FA=shK9.:=1(*%D9KMm69$Q3I8<lfl+#IZDoIbl?oSHK_C/ii^O1:nVA?-Ff?90KQD`_P7:iG?rp-n$;mXq^d)]t\9>d&W\%H)3aX?/=6$^Z_2iSTaJ7Wngf\H<>(8MhCoXqj1=KhV.,h(XLqTce!@>HMD*Y5AJiYWqOG8<"7lZU'rM9/#Oo?rQY$(`Q+Ge.i3i_%_/&G[_W'_ScCKEGkgaY<o]<]UbmhQP.(>d3CK-21LSqDOG+,%s4M+Kq>dM2X(fl*7gG6LEY*:u\SH6gLiS!cXle\R@1%'PHqUp>m%EFH+mU:`OQ1:qJ:-h`=>?iMSrQAZiJ$g#j>IG<O:YC5/1)\bBWQ'K<cD<XL\A7:UB<pdrTm\k0smA%AFhJ@[F44uY6QI"nNWmDbN%*`O'CcEGKPk79dT5#C?,q>9FN*rP`i=(T"SI:m?Gq0B_sY^3KGlgUn1*%`_Q5F7ZTeV<m;WI/:tX`'F>o`rZEDc_B=DjDKZYEcfK%j(BH?h)ehZ2!X9!>ALcqZ?&K.<g>%T]AL4"A$,G&<HG4Sq#')cJ,-9FC$4Ej0<G2Kc1P.NqSJu7ro)UDWS;[M=ap3ZrJBA+lY4PN%T+"Ke;STK=/t]>H+id(6e_gOOS,L^?5O(j^X]9gJ#CP&\:R>*`]WJWUf:aek]X,+NhVPd:Z+Aq`"2JLFX**m!?1*,JhY>Iq\u$M*%qaT4%lRkMVSlq-C+XCEsO4Loqp=$@Mo1.B35;YS]G80`)]f23(oo03a43M"-=GheC^(W+EahjcmI!=<f^FqgPD>:k_I&t&Zaic3b%+-`2e=ke\)qajq>p8kj"<M#gHp%`u_]!:,iq=Zm919<2!gYFX`;BXB<X0;Z_=9[3NVu)k&1C27<ZW0"0?!Zt)cOK2uos7LVXSc>+%S32)qX'2\k]YA"u^OPG7/Ui"Qg+@71<DF$-^G^Ri><?+mgbM&8*mr:2@Pto"O4<8%>K3ShDQWL$j&*A[dsA<KdTJ]7PtrI%d"0Ml%f_0d#a3&H5IW\t`G'>"BY#QN#?dl^q3gu(W5_"#UI(0%O6i@g<cnikEDlt/ln!4Gj%7frc7=(9cLB*-+rAt%\".2*\jl+'coh0Ar%<;Wrj]V<pTg=44Uf_D^KX2*qD]X#3#F2(5M&pooL2?8>hSEFO;&a:TT$f=a`G$^Dn?E%JRCb/qps/7N?]IoM7NPdF'U\iq-BLTl-%YX\Mm='KuinYghIm@RIHGD\79;IKWSm\,:oW&AXKDSi474Fj<bHW30lWt+Lh`r#^trC-T#`F/.Gqh)]]mYgAqb-<IL`'*j$QPUE1%LMrX)+CUkPQ*$V'kH`g)P[(d9TC!;Z1f[8t?5RV?,A4MfHaMC2Y>re"g@DQd5?8R9=hC>,NK[PR@bP&;lL"m$E/Nr(%kFI&b**n`%O10QJS"6[)pHu-+GkUAcY^!i$1:X9co\O>j#HRRMdf.AA6ceug_3VLAF%3"fUWU]rQPS)ZG=JE:ou!\oJI%#4?@P&dCR_4t5G<W-%;)pP[5*k%Y2?mX%#GqC:YANH8HZas31q!r\.I;?KQ*RZ;^3%c&D7i]338+:Bs)FUu'3Ime@BD$"U[$:V?Q[rn'6sp0H"gra6M8!D%fQ65ro(r(<"=/0NT"1\Xg0[JX5@0WRVf(b>k/PSb&X*(e!)d4f_3Xq/FAt:<*?+8n8ITVJ#bB4hA*j:cMk?V;5&WR@/U-U\PLCiN%q"srOrnu*#.ZWc!qP(X/M8)2P?G01-.c0^LF*2&nr&gc<@lY;?=\;$"5IXH'Q:XR:Vff5=]u-aDC$qXE1=ETZZdQj.br/WRqqBGa%M^g(,+GoX7b/.Ui]e)qMQLUZF@!NrSc*6cb_Aqke$.`^L<%2X$M,\"oOYi7[(b91d]mOmWZus6EPsSS@]-sUuZr$=+aR?nt--T*S%XQ+BMN9@8m8TI]lg5Fe9oljg\*0C..9A,+d#O%(28Y@(+L^4E<.5VQY(?8,X62F1>Ni/[QlqbJL/GY!q%\(nT4NiJ4<gik$EhnDH%J'qa+P!<Yg,Rt2U]G%`2%2ESiOU!S'j.5k-[[#(,TKAaN2Ik`P=f4`$C=n)5Bob]O8buslAFWp+9fXbmNp0*.,Vbd20Tm;W!ijT!%W$TQj-VBQ$Z6%S90,,ILOHKkJga?nkhppuOKlf?>7Dd_"@kn'URMJZCb7-fG8N;L(Zm9eL[iG(g0):KM5;n-n*e/PL<PQSN_[ir_%[EXK`+_^^")S][iV(Sj7V`V:.Da(ATmQ<,=.Yd>2K%5>C5%lR6o?E?jhOg*<hiB[rNUpKfkYfF"'BX6efpq$ONoc>?S,lhf1h]EK%/#TG/Sl=0XDu7phClK+0/`kjOLPJN?q/!G<V=OKUY:[IS>=W"6^K]CI4S[bt"qA#Sfho^dQAP"5p/YlLD63`8oqG6SgjSf0N6i(O%e],bjP:^Q=>NP3@FmJh0i]XHYA@`Lj9!:]:lPNt:qod[S9K-:7!7MX!>IRo(SP\u1`o*$]fiEGqhX(8B_Kpd1"PUH_AJ4#KLM;@/%dY,V3%b&AJqSEiUMG9imZXEZZ5A(ahdk:?$qA?kP4SSND:Tq3_)U%u6Z+=5,"YleTHg9^"Q.K6k6R^m?n^b=sYE-0L/UeWOFVmQ$%/a4Y>(*UTpRJ"-ng&>^;=grrnJK<otJ#W=nrm9L^/FC0$%Ds2u-QS_Y,"Y6-mE]F2of/HA0=KTckuXVX0.\mW5@.3*\+8O+d=^]V%D?HFJ%JXdOpu:<$Z0O$G)fJ0R3seC!`^;4a?BbrRS'-ojoU":aJ%ht#^;&_)QKmF=%m'%3a>!Iu0B`)PB7J`?K*i\@"mCFd6?A&=%pUAH*/;#+OG@H4=A.9!#mp"u/dlZn^37sM(AuDaR9WnR<g"NHC<<"G&>jU2=DiaA;Wne928o;uC3-8]5gjenFYo>d.[bgCg_J8VO%o@C,/kjr9Jh:mPmBPRh`55s(1541R1m.8WpT!EE7CqghRHMpCVriD'C4meCK(;h:ug[+[\hA^6K5!C=tX=MWKJ"Upc<_hH@2TL1=%@dE-A1"oOTQ1onm!X<#HQe_8cX5S[uj&`Kc,.:TrA[?m\e]Z\,7k4e"X,gZGX>IPn3pkO68!!).@8$:<NT9K`c&_=Z+0;"b+1,GG%F+9?mc:R2d"68KXj]2?N%m%_i,N_bo),2!o?\)@ofrJ8P#@n!+5>9Z+eX=l@IJ.[r_:]3n@.0oH)RM'f.]e*T='emVPp78i=SWrk%GB[HV%VDmSlHAKO8[>3SG<k>p4o2fM/A;%a2CXS\?b^GYRN6Su(jnu#_+oK_<6?l_dD]e,GNW+k3Wc8Sm,M#cc27%HoD@e6hNP'b%EF/mH#@4'I/1f3^hnF<K<KFjIIYGq:hV%h7omJ8oZ-L4+#?'0b^Bd!]DW@1,>!7?*V'YC\6t1Wl[_':\n!o!,A:JuJE?MF?1o7mZ%=2!nnh;]a,:"E2"S33f0QBf3W`fg3/`8=(?l2lG)qRt.5kO0Kl[QCUp>NU]:`R;B=H`*_=_e$&'?7`hcAoF6@bs&>2cirOqPKNUN%S]@[Fm#r\;SMq$hQ$3][gcq_Xh0\Y%EWZ3IeTUAa<*h.>=sD*`3;87VEOpB)A&>pkIWGJH9N%eiMs1/5]):2AiKlLAlJcLCqrW\2%_dQ[<%R>Df`u=Bqp0f59LW*9PdDJ&gp=C*"5)XB.,p(c!5>P&*=qBN(!L7Q!<3(Cqq,l3)+e?0VYdj\7p[t_s6m!K)D]A#SOX08L%pIFDbO1+cUFM1[[l$ZDp17DtB^oVs2d2>,sM!9?m&gfMomL<PUH#lFiRHN/!(Zi-f&'lJ1_iJ-rmsG;Hq:@f\]_RK7%XhAM&\@_s%`PNf*J4M@B_Yedu=\ihJ?>``r4!mmXI1X0N]2L^MpsCV$mbTm2?lQ_Sm^);PC^_I>39YO4N=5L*aV2(h]2j?n\\<4&CYjNb2O68u%X6p7)nn-#CepL[^EIU*MIdr.',5pd*lp!UcFoV@%;X\Gr1%^hm=@..er:q/04B1VA2E+7"4gfCb!--=Xe\dR;mM!"uW,hHH!%Tf>%'n1",hQ)o7hbItKc-uWXpReJ?-25N,8Y2aMpugdp_sMbeUGCnF"-WH9h9E?ghW^nYd6Ah(a`o7Bcoi^X_'n#!bM,ppk)!>$?F8U3%QClh`?GcR0lc].f&1AP%AT`N@qKFVSIQlE^E,mqtGX&N@N@MpGk3D*_gRmZ!EXk;DXh1uYfakcLe+HcKXk0ZbXF<M15AWPEo=k51%]%St8mWc9(WkA6n(fXOrCXnD7pD;`)=T&)4X0_]IN/s<LG@C;.s+6]f]"/#bc<(3LmI3^/jKK07SoW9<B&NC@gQ*//[6(QNqtIf8%.jr#Z;)2Nb=>`kr@;P+*XaK\EB@Fo1?Vibed1K#OXP3VK5?j"WStB"h4BqGC`GdEoK5H#21'lR9f9Wk7+47Ur$Y@8SMRW*r9ngtM%1B<%UO8aCgO^n+:5Cur.ib)t,h9s-`IX]#Ana,6V58ODZ#_$PQiHe?=XF.:E]f2r;F7o2f'GP;p'U"8OoQs:oPcdT%CHL?e_sB_3%X2RSlc?`Tu&)Pe9K?nn@?Kkul?4-?&CF=tX&nk(`l.VV<*ELV+#Bt45<+4EX>`o;?k^6Hd0Sp=P,t3/eHO#2gLJhu:m[KKdQP[Dg%`%*uMkU\cV?@:UGPJElq>qA3gp#Qq?40\!tgM5K4pPC?X#;Rk>0%c4T-nk;G<_kXM@7tk^`1**SPc]-+i^^q;B4Hm)[Z@K0b/QeT%KD.B0oKfH^pFn(:%tc`3Btq,5XK:dfC'L-Tq'`=%^V5e-*`O)&X`%Uhh!*FjcMl"cZLR8BrXLZIf2"F<*e;rCdpfnM6j%Z9'"_<m%?pc@l3lUs9lLOA\Aa$quX(ggi]n'nmqEC-K/':Ij=:ECP\@L"i4lUVR.'nQeH&#>n=8?^`rBV3`j_'3!/ea6f/[7lCQejn%N#'Rj%-`q`2)nnWX,cVlmT3*3\XnJXjl*OW7?4;Q*qHg9U]itA2<o8**le^?J%^^N]&RY+8?QGk0U.g$mn3gtN.QPNcVqdG#"R_V#op;?;%op#-5Ok5YOhVR;8'.ucl(aalI@F=qJ\d+mH+4P%pV_H1&7Yf7TnS8`3Qh1C6!H2B@I+1D'fm$FV=P3g^:*4]U;TRdt2F_nO9$V2A%/h2NTA9bq2eFg8/o4HJJnG_/Ia*q?D=[)`:]SdQVh9Cq'qY/.uf,JqO?u\"Bk[V$sKBhUq\+cP=g@(=BD<4h$V#6R#=E@7j9)EJs%UEG6UT/Hq852E?RI\jrd^UJ>/'<"4HId`2CGVn\</4.MMe&nY(h;)0NrRJ3FrH_]P/*QN,g.&4'O2b![Kq^#X8\Q/`pdW6ZKB9##%p>$)/3rg#k<jiO-]a`?.0CF<sA^8Q.B!ZKeVUZdWD7*Hq_\\rZI-Lbc__(#qUIj<k59A@(HlJX8DMs:g2HoLN*#\qc*c)"`c(esB%4B_Ug^qX5+FcT<'TkkB%Ib-Vk%HR4b#])_Uo(mb;*Vaml`7hg8HV2?2a3rpnqiLKAHbT;s#?p![.(Ch5Q[aC9-0df7Pa%0:(S"9c%FOo$\NPip!es"+nb3.A\-"gd.q)rCW>KC%Y'r%Lq&&@]m]IG=.>E.)!l^&G@4oL?<TF"VEG8D#"n*>;uA+(dIY>;/_(Md$[f;a<"%FS6aYcK]%6nfQH[h60%k$+!S-/!5&Cd;Zd#D-2kCXZ):^[I!>T]4J@fUYb3YYjT9*4bVdAs%@M-ZZE]hI+24XoNU3S:.pA-_.2f_%lh^4N?lLbMEODKtjb6q\5DAoR]QX:]nu_T\*]MG45/aOX25cYV6@W'#gMF#n[bKo)OX4A^hYhT#[e+mh!F5?4XRs$r$\!%FPRK.N%5L&K`@F\nO;(25J.Ln,$`*j[28A;UPVh-h4Xu&S>b?D=Qj6'%6qu"`GmDmX6%4B&#Pui0)'NVntpX/a.mG4-+f%R%ra3YU*k,X:l%e9l!#8i[(I6-X`Z"oQ@:lE.I@hf<Qc1>S_elC2?$B&3"bbb;p?[INT0Y^6?-ikG<(qXqRLq@ROSW7ai9b87p[%aQ%\XQ0=D$hr\<%qq`g`nr"L"*G*t->M\oE?s%7;7_q"K@*@GNpUl"mEH8\i1AEMNh/9\ljFg:3?^T8->&<V5V056[G/3.uh;KF23fY*PHL4be=YOY!%Ae-Mpi+e',<^=(8oa?(a74[#@-pKd*E-g"!p)7TB?H9,=roqkcfV7,tV+3B5+9.Xu.LF6.n"@akG)JGJRb"\]<9U*$r1W6NP7>RK%Yhj6Jqp"K!&%CW^Xm]\;W[WoXm=eTp*n_Yb3ShFbScqdFC1,KJ1jF3>AcGS(WLpe.qnh%A7*b\dko2alj_ol:4G/2hW;"!BnB<EX%8#m""DhqnI;#'4tlP9]t^N"_Q]*022O"acl$ZVaPl2uFR[abSk<YPr1#D=c.*0=t<gY]\Ai<"aFU":l@FL%!#:nFTX<k$H@P&(;>%>-/L3fJ%dk)I=9SOAEbE[)a$]HD+Ulfm_u;)YK!rR)8KiQGKM>L:,k*<lg\;`f$-U97pOl6&g4=X>[1H@FRH\/$4^9ng53`^pqd1%?)4*-$5+HSTlt,tF@,Lq5P;H`:G;u%&,WI=LTdR$L^H%^R@)[IA*0WJ??"gsIWR*]N,S)U(/a=K)i?5R@rqVi)JT)h758*9FdqHB%nTGS#=mMjulqgJrY#s^tCSce+6RbCJWn0Ke_i4Mkf0A08\i:lg-^1Y=I?a3OO389LT7/ndn"D"7/luF/Ab4gt>B]to5,mQQ(Wp8F%NEf+-f@JQUDRs)u]H8T)@qD]%.ksafJ-[I!,7aOuj9b"MUI*n6QanH=hgq#2!]B^H=I5K#fieC^='-b>;7pA(?Aa5TrpR=q-RM24%L%`M0G=>DiBnP5C+*r]TUX!kghJ*9?,$!)R(`hY,l#hdYfVCVb2^5IZfA0^#Z+dI597tG+U/=XPbi8#-".&9Z:hfb'701a(`j2"h%UG0aeD-?F)2BgOq-+\D6G)K`NPT'MWEIG>qs6]LN*Hk'nV=9ur@:FIrAnKjbP'Fj?H[1BNVSMb,8hM#Kq/[D0DjXi_KL)])lr63Q%)["UfAUk*[8\:f/lqh(Z]<<1mMnXUNMl.YBF81:#.ZG^1Si86`?hZglQ!=h93TPJeM:t7L@MUVDpPASsMFDoX"m4uSKgA2XK'L)]%KYA<l.G/N(eXQ\dcUYf>lH\q:&kQ;(*u/t1$floHU#aeapY-Fe_J.^K84sD9jTnc!&'irs"cjF`!kr4,dm"3bqA,ElU1fi^?7]Ph%Q@U\)YuJtg9j4HhUUqF0UD+/-dnQCIkU#CR>"ku14,.$CeTJ!mWiBCh/@]R0R-P`/B0g[aU8ck45h%WgBP<El5h'$Z.N6D]-^nXE%eL__sL/tYqb7KJ</bt'GdBO-@$-U[I9uncWEO@u]cF-EYB^3#5%rCTA`IQ6A6pksf+N&c[Q>.*cbt=WH2O$UD/2Ke<SYCuX'?c5@%ffQJH@85XCGL_(U/m*h(7tj_\U$C[!'Z9EY[AL?/>\pbW"fmr`EQ"CO*?#3rV'O*5g,ju+ZHA!##/-gJfOR@#qV%C07'q'WDI[ij%8"L!]a)Q5PM9'q10HqM@!LFEj4a#QmZHJ*+jcXLKBHE4"@T3o2U8HYQJUMAsNac`e!q6He4T(q;[fm?Hie;P.;<SuMNd(V2?\.i]%a@)juYXc+*3&PLR,?d]A0guW-,pT_^3^3<88jY?S4mZ2!p3T#!16iF/YW?g!is#s(9p?:$lG0'?O-7<\8OA0.A`s>Y6qajP"Q3+!%K,7VB2L/^GN)%iB/0Z00.i8TF%itFL/\6*>2+pU;Rs*WpV/R'%YVC!'KX*F6-Am)IjE#a3V`>5g@L)oc.]+duM^>+J&2PIs64&SB%fr0Wbm9$+HhmAu&]gcK<@4(33EiPh3ikbfn%9Qc+7r5SHX+hjs"aTnM,GSDG_Wn:k=%7i8#aRtd=PS.)\7A0fXQ4Wla@%%u8?)lp%E!QCo.[jcON<k]GL<ffjT8J/Y#?`HMI3:QoKf,#"8/[CQ)!0k'O(*\`KgHMf[m`oEeu3mk-eD4;;H"jpUgqJ=!Xue@+c.-DTh6"H%EPj9KMpC<Q\rM^gVnu#=>S6L(:F$6.;ML^1.A8JVZ@Yjt.6CFfED5Cpa\"^Yi7sHULN",pd25C,\2f\Ilps-/KnMj]a@\XYLn]oO%;G/B%drn*=1=:83FP'6b9pY#XD-[/jX<KjY8>QBV#$M;60nhMb^]mB*M)7l!_L#8bhB7T8(?=$?VkNBjpkD@/dgQU7"+%Ieq%[s&%"7hZ?#jEmD0c/o(K:5-ScqT5dQ>74@_rbWLNWtELCVc`s1nt>W3/go%+]Yp-;R%Xb[NNCs^Kn,u<Ps?p!CR;0X)#.YP"?J:Yhu*n%:opNsj=Q]\%9?-c6;o1YBpm=JD$ds3qbf:F'Y_(n6XOOq29&6jTLUb@S"oM=KpesY_Qo&7\dQMV>JdQa?+qu@Djh0$L!e0>)l'[<%kUIF<W)[fE"5D:*6%F%4(2#R<[qWEWF>*mMD-.#N7QT/lOMo`bRVujXhe@(J'6Tb;B[gXK<a%B_eDY)0%cq1,W$t*OCn@H<9!>jK%W4B'@&mCOSR!j\r^1uu4$PbtF"5U=OlJT7Pap5:38)pVL(/]"c:=FVBj6WM22O\HA7hMd?2S[6fKdZAC`$n!\SN&!35$^V\6Z$rL%LTh*PG)=cgO?gS4CmPD0X_?Fc`fgBPa*'0P^]NX09"?@REMY;s;:Hr'3^EoXbLLjg+c36HY]E?Z!+8VOWDeHdek%HX0#g5<\[qoB%3*.%$.O6`N3(KBi`j4#M'WZF,i=FYS%b2iLF:9?E(_'P=bpKaF0jsrG,ClQ*.+^!TAgFIL\o!W7+i\G*i=AlA2X$6!;2'dO_;mC(%dpTO@7jHTr6g=Y-Osh*H)Aq.r6`Lm[2N\PL*E\sDdhOnqUp1EXLuU,AOg(JtXt=a!N8M.9"r=;@'<rGK)H\cAFJ>giD.b]VCRTtC%NhQ!V(1S_8gXrh5QFETk4"``:A7Je$p/t]>NLpa*RDhd\V3Gt1H"F?SB:WZ#72sHVIK2)@)_=$R8T&WHR@q9gHGp(bSDUifK8g7k%VXjm\2dth"*+9O8)B1qL)])5&N8e4F`S!t"!&6tgK2r2;$q?Oa7[k)q*>EZunJ</e>"3!UOqR-fgoqn].U">2g,Qi%Tge+4Ws]OT%/"pE_J]!8j(po%cihC:1d)Oa5$!P_V7A6!_,D/j8I77j4[(Pa<2E^M@l&I@**C:t=:LO/IQ<Qi=168t2K/I5-BKfP^b&e'L3hnOY%(XP64$m&M<1sP,rBV"B7A6B'lR&l*\$,=T`1[GLrM,c&_c:fT2[5jBX0\ErSg1FGe$`&TZfuu?1\?&UH9nC?>6WOPS%)j?-S2)h!%BN81nn\'[U1)`Lk$a`4g&s1[1cIuro0i[32`\nn2,':-0TrJdl_;^O_.1B-\<FK"o.Z\;&f<g3\kRHQKPs?#'O6)VR-:V!:XeMiC%WF\.:S0!gn580U2crKS9lCq>#d8[?[20;OmVRgN*eKE"O>f!V<3si;S@&,b)d%OWn*'+rSXj,7d?A`0R3k0^;68VfC$qt20Y:./"%i>VP73F&EM89#&Zb@hQ!Mlm7\K`sK\BP_j$Oa;\V^c5<@]O_a7c>E^0"W4SY(cK011DPZ]_i2O2/;=oT`tZI2N8(]TFYU&[6RtMo%#%NZaeO7c9q.5[H1LpS#6d\;3c4t%1IPj"Tic<+0\W$tJn5acJ1#1b(*K>;B!d#99!Gd95#NJGnJ;nSBFsG'$Q]U#LQg.Do3ttb9%GTE1!R(d?N+:6;k?>N!"%Df"Tk;R:N!cu7;/RAZOrD<+YCL<,38PB45d<1@l*s2s3c7JDE$Ra0n4*+BN]iA@FE'baeic(#^0"[@h%ZCgn*AeK#m=9drKjGF5UO"q?K?(BXd/kH_<-;&eh1gO!&7aiCQ<HkDE&7A<<)IR8?$DCTV5nrScN:Ip/gt>+bf/97.kSQ2)GK0/b%1p3u2XE4ePrq)pNa*s!'7'=YYkK&XiI#tV'1)`Bs`j0tcYW3"^fQ)sTAK_M/85hC9F!16oPE+piL+8&_Z3+b_!\KE(A;oEUQ4LtL%*Ja@'X]r`1CDS"HG(i_-F#4o'"H!lV;hda(V,=$\?(B`8(1$&cj,fPb,K#Ye/1"&M/oW]Hai31L6k2l>?$n=DO^um_&`G^q$,"S`%n)Z5m?aHl.il`La&K/aTJ_"((AHm4Gjj^uCr!\lW,mBRW/gX8O1akc#6G&4#c%ld-oU"<5"DCV:/B';3T]7TDp6`Ij"<.EhkT2)p%;'%3IaFHaX\IlY<c>d%%N;2u$OTQn`<2q?;<Jkdeg)<u:Gapc<_j#D,<DAI'O0/sR?pgS54NI/3)lU66!mk$]`@s]Q3?eQ/2aM*'%8<lQ<,qPt^"6GW1Wc(d(O39.%:5ZDeJ4.sGNM9m_%TW!c,10^RW_)6j8];<uW6Q@/b>d'pj+Zdn0qMl*q)Gs5f`6mg<V!79fcS"c%D4V"u]8fW$I03ZQ&5YY=<Cf)6`c4U1Z^m?iAgpJQ7&Bc9@iWMmg!g`TpZ=d(L^['-#4Suo&U@Y4C:5I@/E&T9aJKI0^T"gHaqiZI%&1G^c:`PUkCoId0aUq@8YS:Le$fUkEfhQGC\BIhpD^\n7".]cG22NMd@o_-g8\IG7m4-P6<+U2@+t0Rr5D;h%7'om&4NH9uJ\0qO%/MM/Y>PGVSR0l`*F#9hb@2Zm>3lQ8j;/J?[I3T/a*$>p_bTTOAN[EDq[Y$[)KYpJ]>**qu_J^EUM^I9DW#D=ilDAJ1q_[&Z+m#Af%$O`Oq[4+RdTK@"B3imA572F`>^TmOt!"EF7W^2Y'&^c31WN'sF2FiCWJRV&Z#WeN]B.t0X6-6Qghm?'*('P-9lK#sHb:FsFgg`ri%d%*l&h]a&+:&Q^g%=65P8akSI]!I#6U2.qoD2PMdHTT5c>i?*n2&%,BZEFUFQ3nDPdFoSbL'<mS4(&4hFAc0BUIPf6]uKhAbAq'c%5R+D++Xr^^Ft%E/J2((4bE+%nbRk_])#`!-ZJ+lZA'DsO+dR);+T)W<eeLHiBJ6He\ptJb$t7-eY[W^j170@=V]>qQ-qe!3!ZG[:%O=!C52uWSV&jr$21,(HFWZ-g?_N&82D+j%8QEZle,I(h6RK,'[)`GbL0Ff@g(da1NM%u4RQpE933W5U)"'L5>"ALMLPW1,5(s(5I%`=YAtL`FJQ=u'>5Jio:dOOYoc=i,32kceV19o];nFA.<jPoRl(a?Tt.$_Xm1O<lHU+!G5=99GBIb-FZsP6-_0?-OO]-Nfe^1/(9(%fHfm,NX4pMl4SG#"BrZ_P!CbTPKj2gEFFLdBBPrIL`t+j=DX*,1S?$FV]RSSJ<h?)`K\Ou,u+lUK)n;3<4t78_\<Kt;ZS)h/sN2/%]f$!Sc>nNPZ/qpYqM!=4_\J;CZk-iu!qjaF7.j3iE*E7%n15E[?H[;N,0FJ`&gp_adI^;7d`OC_7c^pj-rc7$B+oaE'N`Ycis`t.%Z#LR6T$ZF^[S4&_/J2QS(rC*W\8t01bS#q7Fal*W3'V4aFt%DDgDI"4bBA:^9ZqJT,D88.`q(;E+:+P^<4)uDlmK*F'#CuSX$aaE%lr/Rr'-o82;E<NBJqq\jZ-<rUEi,`1%M63UQb]X_<hsbEmZY#;+-GSUrY6[<4%9cI<>.7sBI`it1uX6gS.t,@O`29&glc)E1u4mC%.OI<g6tmPDM(Nbj&iU,YNoaraYD,I%2*?%W!KQajs6u3=d$5fV)#>j"WY'p.6Q0<7'l_0p.&s%=LO37BD`ZVU6A.B[6"Akb$'!+h%p,2rW/3q*EAA&XQY^8peP:Zj5iTL=PPZ6Jd8NO!;\eaPM#d85bA#nfq7PH*(\ig$o:bAKM)$Pd.3P.R8#A>Gb'B@-+nWSs[&RJDn%)o09="%<D8(Ij]&-\iBHOf9UZb+T^dGn<8A%8^S'4I;q./R9@'ELrAa9N)XbK9r)p;_<npM30cJ&Qcpt$8[HVPi(!""n4<KL6<6H%/qto%:(FQ3/!ij",7`draPi!1!WkJEjB^,;aAEHXj>bHl:=>QABlP9U"p!I)+lE>J7cH\a/<IMTq]HDiPi(!b"E5JV;3Kq\L&Y`&%M*]/V^$?47'a'j93BZi1>C\)V]Kn4`5aLo0?r$d$S14b!#6.]'3s@Su&dL2[#I#f>P[P]TpeC^o)[EY_,q5G@*W[-u@ZY_//KIP!%6"WLp:BU5uk^H/m*`QiX,Pu-la:b(ST6iq8RpV,Z(5`lB<OQ6h9&_N_0UhC?,0!K';r@,]5qKuGMC,es5Xq7\@bdO5qe[4hN6%]L%4$E^&3SZ?28?QQ5&5.8.^#R#IBEADnDXDCjqojhPOZ8/:[th^5Kg?\i2snj2*5YU0UgUM,!>=,)pu9:%0Pj1*)3KOa2gY[(1=10G%W4S@OYCu'ARlqa\T>J+;_fCG[bX`_f\Bff_V8D73AN*UJ#IAIB,0!oY,U3Y^mMNPu<7;O-1F)Ip\p/RpD+1[PI.'6(X+]Y(]0$3b%)Y\=JI29U::j>rFFK"/,6OqW`[m.79K7JX,+Rso>o\4*u/]bOKiA]<l&'JpKRcbB-K1M5gAE(=6K1nZ5e=d[DKJZfar!U/2'i2(G%\>.j!G%B6Vp'GMc8iH.r:(Gma3EhoI6+o+Am`EA)F/\aA+Sss;(r*'=mKgYoj9C^h/1%UWA+/h.HOd;*1pAFmjpk!MpFY4.L7Uld%Tm*5a6r6`#N?4Ea5tb46d#51K(L3o6U,mC\R(-(i6Rne0jRTs6f]J"jWe#lQm2`p!5mqo%`*#i`HO#>0'I"un>]qQ9;M9$GL>ptI%DGes*c(>sf]$47Q)pW:"W$Y$Qm1QQk`=GGgNSsB8#gWf8GgKBB#`GDP]-d#r,fel"D4V$@e+(Ke&p=6>&k(GQN8OoK#gXsgnDJh_%+sk2bbUao3$F6P>7E8:H!G%53nAJ$8Y-)F^o!g.!U5'.EO<m":f\uo\/HKC`Lgl2`0cG[H=3/*,<Ie2gEU#VJ305FG8^QP(8r8a`%XFne$?)n;TF$pLK4KW377Ke!W]s'#;/E&V*((^H?/-iIr6h.T3U<JE5bd[]++]W,.96a3[Ns>or'Iu2D/A%-+.F\Qn0f'Pa5'',H%.W2#c<*.![[nIX9TaFUhG`KJZ6hC%`F&:nnL#`_-%OsqX5iYRn]&nh?=i,1DHTZPGAOoBIjg%O9'*IXS@+-$k#W*b]9Z]I*Z9qq`%+7q,9EC?J[4NH=>JTA[D=(f/S^a'_sF'*EM"uT^!TT\]u4OeAB;r?cS/(ub[Uo8=eV8S3jD&_gPS]1n%W&Z%h'fT(TMIf6G2hUu3%):T:j@rM$*T7Mg*A`@jJXuIpl,"()$rUNo2A4XaD:=BHb=igE$j0D=7P?>pRL4Am3^9CRdV['%ANiHUcXp41Sk@e7n(^<uf!*dX?%gLm5h-eRV@1P1<^<E7o[iqf,VHt&Qm&n?f*:Or1.)ih[L\;os4FUN9R^?K,7gH5af@.suq&am%kr*+IkU`ei\K\JK@4EQM<ChLTD%C0PeLLJN!]$<TC"F29/<*i#Ej-9J[n=!;^%9A#6=bCcCeiTc-/Vl?;R0kW>GXt#Z+F[t5D6772?haG(=\BnZ7O:X6DI";q7M9@Lt%ZL$TUNH#2hicft8=CdU(,@Y$5A9*d)Z)27;&YlS'a_DMm9iG_=2TBh)TJ;BFPKGS;hI>O&^M6\9^aHR9,(\>Q%[65.e8t0.%sjF)%N90[V`scZ2<)QQ'lr)i=87RlCnABrNF$p3^M&au[JU.$1%ih1ck)bnu*'82"#96H.5T0aDFB)mK0cIqI01sb/g3"Rc&rtG%*]'Ic%84bPtZ:g%<!f`=K9;A74"I^Pj9JK(2DWVPXa,QI.:EBUA_K/u:)%eV,R'@P48KK=@aFM9G;s@!X*7-F#duPV-R&)c6&`p;kM3Gf8%d9_<`-%hU11.4\:R@M/1Yda*[0EG_kbHV/j7aZ2aEB7SmFB(1%W&Q!=)5G956Z5L*EL-*aH6AUV/O`9h.Ea<<9aW[:iNLtp!mM;p%U*Pgo_`o.7G\[<4?GYSOiAl'()7Q%oVLUI'7&@'t@6eg#L,2;_D4OFl&8)<qW>\]/T?`?7QWZrAF_ZaF5f_uRDj4f+4*eT<DMh2[%O=3)2\@6N7o3XuJZ;9N;]!)Ug<oJoI?POKQnb%h1)_7/2@YH@CAoK"ZV!0qSnq=Z@a>?.bF_lV`GNbE=(R>OEhDXQtNq"(C@*r8D%]\s+>:"M,uZhc?XFH4pa1p!'Y)0C37N"H\&$f8eNQLLAa#`'FEOa#;Q#UAf:V0I\[K/cF>F;'=XFG^7;A$?N+hd;C5U7N35JaBg1%oKtknL"E[\1!Xk,&.i`A+o>kV]\1B#VgLf.BuK<V&DJ0:CPO;RkV6G+h..F.32,Rkh\a\=#D"k%,tLVsjMD'Uil!N\^rC>99n8WD%H'n+I/XZ\Bp?6\("dC;aa,U2Z7F%b_U.h^bZlKb?ON=1*f]j0s&7c*jWJ?$!77;lp*)kP5,$fi@%fuLp)e2,h,)7TT!V&Q(fKmP$%/`A]U#Y;3?EB[l$>a7\o)-2^;+cQ_Tae;N@BaMt^#6m/`V<bfo1Z1C;1?-5CUD%"^W,!PERLqPVdJ*'lp[iGnFL/S_A55dBNZArB%mbQla`X%8FiZ+%>PVFZG=<u8:@$^;OW[>orXo,\KY==ij-doNGQ7+%UOYkMt$W*:pUU-5se6Uj4W(2ZRa\"Gg=\Js1>JbE4^d,u^%5PqGGFBY,^Q0@*ngToYngo!egKqPkc>B[AC.A;9k>[#DM8)YuaH']`L*d`p'YX[GEE[&[j%HTf*K3/%T&OBA_7Uic`EuQ?#@FEa4%l8n?]<*X`@QVXsW1/ZSOCE9r>O/Lrp(sr;Vj#*VB]b)j9DTj8[43hZ":foC+@Z=TSH01(*eQ"3$<$B/g1QtmC`n=)L1b(H4nj199%b%U\i)tPm9\a,>6?1m)k(=Jk2$o^/.MDgqh;t9@Gjhn(Vle0u)IcJEp9_u1nm!]$>4s'H?0S#p=Zo1EA1bE`n*o?GH)J!$?oMq7F%34l/^9BC\h_'=Spb:Fr7%'G3&2_@`lQOu5+6+*FKkBWerMqH&&NI<'P`RfJ#!kdT1/;[MM+E9dR0^bZZahl@K*9T?TK;ne0Q,+^L%<4[6D=.)WiN',7Aa8i&<63jeLKKb2HnkdAP:)%3f`0j;NSVgh^=E-_529$JM8$tdaj#j4\HfC]a0'Ug'T?Ai5:'rkuM0-_E"K4=)%6P\WCoH4`9,\I-X.bR1f,s95.4b7(A;63*_Yp.,Li3D9t$u1_bW?rX,+k.-r;ia._:eS'VU<7&6&grAO__ITO2<GHbNlY$SaW"Qb%>/fH]G:=H1!4@LC"9Bpo<a>`@PJ#=>(BlcgA5M=@B`]e6KNc66g&WT3Bdm"Z:g%ZRD,QlY*2BJ7aruVX8]!QrD`HZHI<9IkNq&S]%oL(?ok7At!BA4$/bn1i1(@M,E>D,"i,s8)>Y]CRX?Hfq';Bg$*?2?)s^4>(kIB*FOn.&74Wu,)fnI7N06QINsJp-OCNALpDCA>^a%c`teO=tnWG?`rZ(4TQI;-k'hF-:?SjbM;YAEPcp?WkO4I07n)b)#g32N<C]CesS=I%0b;mUi?u")(j(E,N1Rn'MKY^"rm<uWBh5W%cj[lG\i)_"Lf#ku;0+S$W!me;)N#CPF,]^[+:;^W'*NDg$jZZ,0ScR6)%A*.)O;=1_2,kQ``mB[1Q>7\;a8_Jiml/1+j2D_Ek06`%VrEUt$jm6meC\1dlnJ_u5G]/`]:.[a6k^eOBItCArZ,'[L?"/(I+]M0k1P!R=EFCMNT@#`,ITTV<mB"@i7;X.JomkbIHkYUbGcS!%j<0b_,fPrTMTU_gK8c/B\LO2rk"oYX%T,>J#dVg9?uMe.fbJIln/V=-,8e5WKo$etGeOfZV[6H[,)8!]>]#sb+WrAq3TZVd#IG0o%.AgNU1esJVA/]s;S#eT2)3Mh#`j@<l7%V?(D+ak3_K2H=[cn,Ae*sd4$7IVQ#;V9QPP?[2=i,7F0l7D4#uVBu\Y,m[3&/Voj7T/e%$t_ui@3u3uD*<J6*n[C6@0j2mkL`(;.k72Rj:6$'jAZ`RON>=u=%go%/V@3CF6ZV>%V@.jE`?0A>=P,"C5bE1>q%DON6%]MEFV7!%KGpW>jFUDRC'i4kUY72>V'Rb@oV-(jJ1@@75a0BlD(;/FTHtSUI^"q>>)&7U;_Iu",>J_*?BRhHPNRK,M7gi>#B*0Hd)Ri$/[!D4%SmrjY"MNJ7;%Npg3FRa\n+'R8+pU!9^mYJj3N1t#VnRY3f=#6m8Q"S9hD4()oPNB!5W7`o$?nbr:aPuT>ZH^?%q_-1M6"":k9Tp@%$u.PP:t*Yr\c>`$j+&I<(i2WGUEpnT7e<7cjHq'E[g)H4ZshFQKNU947LF2(8@XY%qMh"$2Xgc!eStH8Dj6!j9[1=EfHQ=n7^@[6%RIl2\.ZGlI\W)+6c,S#a>cl(-2a$`NnRaUY;h*g2,_P"<ma;r]ksUb'E&p#L@QA!VQM#ohB5rXHP0-mIRAE<cT^ebG$>OMim80,j%2!0SuFf#lNGM\L`[WnO@q/6STOeZ#B0ue9d&1;`*(u_8@RdGkia\@1,Xj,8?OEB"1ICsYDScN=o\"2Go_%D]+%rh)L8VWHD;_G\H%3&/bi?E'f*,1):i0Z=#>\M@"^h^P")L#m<7Z^`/PWT^oFi/I>J*7G[rieS"Wnj6Z'(B]_?SEJB4;0#3#Tot#MAX=#W72c\!K&RqK%Bo^82`H-ptl7E$c)\6&=ifobu*;^;D7c28.6]Dh#FAn]p*0EOHa!_D^;IWHqGYUDdbs<r#8r>*b>tUV$C(0GIOZC["$r[QLPJ.[V%a",e!72LK7F.=A5m>u[+31LHK!Ye_+P8o_DN,`[YUh`MWZ\7Mkj4G?s;P9hIEnR;-8TA>sB+AU8a?X<VC]XMXNm/_!iAkltRtI/`%X?!@A,(l?'YrSa/4Js4?k)blq,mBRqQI.%uR3$[]$it"$a<8HHYstn`iP?$8;K=`iGYWXJP/E]Xk]@MY:3&aW1Ie]NPPD@"c4Z^u%.,mh6M+0TnK2HbsN-NKY6/EUg^TeuSVP-iR+#bCj'<*,aFBQZXmr28u1mjCj3ZA9k5RtMthL@h0K\>"4R\^nO$A=P&DsSh0:4o'U%#\e.9L2Jr&?L+Wgf.e*h^1`>Z658H=rGZBL<[ThV>\5FIjW=:+=4K3V364hb*KGlPD]I$k@uB?e,G&QtJ]A\e-)ZdX&r,G%4&(Jg%gnF7Z)X]G(1B.DbRjUPQ9RK,.L-&]@F[L[n;)))NmD0C#dgpXXLnuLkn`6uKM3ENb6^*rgTZducU,:Y>QkA[>)F@D-L9lQr7,^n@%f7uoGaJPdA=E-``1_"XA+iBD-n=4[3P6!7(8r@>M=[JPkA.22\bHX'h3?l@>Vro5A$'*t>]Ph!S=i,63E2R0%(mE]b<C7KdieS"Q%N-6,houf%LZ^cJ`KRq>N7i5,DO]um0Ft%E/TLl(I&LTB00gs]cNuSa!,DJO=HO+\_irkJVIgZF4)='TW#NgQrL^[mSN9CJNgDS3J%T$raZE!ru\-n1rsFt%FjV)^YlafisJaK<A=a\Dm9i++4M3lcM@I'Srg3]P.$+Vg.Wbj8jf^Ga..9lm'XVbcKrNQWq#:81\IohW;'%`hf"MGBb;;()"IUmo:Xbm.!KV;TdE^$Eg.ZG<SK@:2mY*E?ZdmkQ+JuTb`$#N/f.B6#nKgp!L'mh2<+IdE;9qF5QgbU0a0aH,u[9%d55DkAqZ=7DFPmp@/K]`nD<1B^I\pG)4"ZqOqV[J:MY#.As8BVDS#%CMXqLnFYp?LMF/KC`62;XGajqofR0np64.f%8@XWk0=4]:%WiJ%k"1lB`VWM5s9+R`M-jr$Rb\`iZR7n'6<;</t.)3#_TrN2f4BF8eY\Z(")"Wj/=&od=1cPuQT%am,6I>5--_A48?&2<)-YP'J%-_YN_:DP#Kl^M(V>]Q9&99n(&<iE*?OuD5@X5Lo&(oUjb=@"r^fEYH=h[S=UKuLuE>ZU'@pX;*"b(5eheLWs5,76\1E2;!\!tn4-%fo]1%Nb2QUh&rk7\uJ;#5iki3/eRG&nqrO;N9=a78f_pJd3GHI3<)=>WI^&&3*IIb=6`V0M.<P;@la4\.mFn_:e<t7!d$3Wj@I`E%TWX)m8E<%4a%CJ;!^A\GC5YX'GtrI_<#:(^#=qQdMDHF]1d+i2eL6/oN9/QAXrPedUnjAuiAhcq@\Ds;Z_f&Lc%m@:(tKrc]AgXS%(Y?5"bS#qGLKsA8=^/h4>bGk#VBdC,3+L%[+qZ+*Z\7GI__W:V//#kZ`._h@U+@!'ThPs$M0mcYbn<9R6k3%@0;2mEVEi($&DF95%_CXY+6$Pln4+uj>j@W'L'7aO[%VC%5V-sWh96a4^L1EnK?K>4#.8`o@`d)Q5W5/9!1*R5^-nH^uX"@`IJ8Jd6!k]/;'-&ne/43[.%M(.aYe7(o.iPkNqR'%aN/)g;ZU2L/c>n`rN?kF/S>n[8s;Hf0+8&B2-kSq5Vel:m>9-MPXnTkG2&&3+k0`D9)=gUjsk6#ZH^I\NH%(_V%3o-G3'$Y`iG%P)/D]#=p40ZHkr8@BiBVB16qn`o2TONT1$ZJ:WHi#Dc(7Uo9C!$%,QN(=%iQ@NnDiC!]+=2:0Bg0=Y'7Uu5A%n=-6]!65sP4oE;#/B(/;-C8"1S.oE@Pr[ob4<2?\Ol;/U2qr?t^k2iGVpp!R,qLF"^<nkaE\N]D3SK?85fF<Qckq05VQKp+K]eSp%D]I&#TVR[(R3eY#0uca%-qh"!0h5c!dW[+&-(4q-]^Ha:\K&['SeFNLFS$aI+QL"!9oht[NlXK*n/FE)H&O%#Vgd3Y6WjJT"AUSM%PW1,7oS&(/.A4ls3L!fkGIq_qHCNc6cD)rL3Peic'n7#rFtoG[g*4[uaJ"Q-U2Ne\0M?Xc4j(p`bQ=da<ZI7NX]T`qEDi`4`RJ,n%k`E_3?0H#W`C62>$JgNh'k90gK[j,1Lt2a;+L*dim:&IYn$52?ckTD_96a2p_THY#16A;NEnR;-M01K,M2c/U"QbOR3CO="G<6D%%$mVkGfJp'``Hb2i@3l^nF%Bdt<HY7:*^[gX):B@4[4U2M26[q@C"gUteW_.90"[@h>>D.fj";>rA._DiZ=633r@eAt'>kA4Dd:8,%:)nlIi=D]c4T(/Z_&n><GloSBEltXR!ho&d$YYj#7Uo+);ODMq_JPgLKdpA@/bI0;oYOe(Ah!L9VB@,h;aM.2G#>/A\P6<S%DtD9%(u[FQks@bd*MHpl3MIuY%r$E&JYVUq=Ul4TmJ,iP,Q+E[^bA0TP7obgXHLr?XCGU?9+2rdUn4S]5f)mYch@KEMP>qa(&Nc.%uKm>%%Lnd5]Z-#m)^a+p%4I7l4m_19MMB-ug5Ld:K)R)Ul]R&fkq%`b`3t?V[(IJh,`)V'#)s$X/iG"#:(F@WDhq8,&_iDg6g<ga+Xms;%NQNsVi&K$h@Z(H$4I$!d_haaq\,oQeaMEh?77YrtR,]`q*a@\QY7)m0W*F:67[tH4&dMA\ZT'4NT_bo^-NZNP(5\p5+W]`+=_uJ"%OS7^jQ@K\pE_-)D79bF+c?&9u71O&]<`2o-5ba2s1"7$JoE4IhC.@8\`TX&!"Uf:"5H**Ng![f)/`A_+O\XZ^>QJU9%SRJ7ON%;q%hht(Fo`&jsI!-aD@5.Z`H&#XFgq]4lffHRW(+:k%Hg&-[TS'Ve,Unma(Oc1<e/s.H3S99Ra8IpUaSO06PY$uHZsiLe#<Dmm8]kQn%_bG,0BW`T(SH],%Lqkk!-MI:kSneuMqXJCSgi934E]tnu\I<K)cY*mkFfnI*oMaJJH1Nh_JD+OF;MCdM-145sWK9=)\#^%HLd76[%:\q5$n.2?R24ujDmPrZUc(.q7Bd1346rkK5C>'/;1Mn7OR(RRe!.Zt!R7npLChUF8O1nPGq;8uM1'Jko.6uma2T9d8!8qTb4-B`$%Ic4l0@FG($&2GF2=%X*mq)e\.2/M.A-&?Ag5Dr,<S"eU@DlH:OAU=HXLe*i;)Q.R]i1=[mLlaK1mRe*o4Gn2D^bBH79glXY,S9OA%U>[tGrh-uge5X";[8pU-#M8&m7JI4ZC&2/V+De:m5?Kg:L@+ZU[E[$Q0"`<)`W.%D`3:YGdRP#NYjD9>$+c+"*Cs2.d`[&Vm!]ka%8`ip(*jWdCf-Fajmde>QMlj0\XOF3'5r<?G>Gbb+K.Vp(mU[t^f+usNkr2Wj5ISZQ,0YctM[TMQ0t(?<hCQ[D:]<#T+!"grNk!_a%e(585bFQ^4,==P>6P2#-g&\S;[Ae2ioVoSJ;E_Eg\\7YNYXJ7+HQh31Q.C;qNlfT)JdP.Q=rjZt=;tF7^FgW$=A.[p:VBi2:hp2-%;*K8RF_`B^X=ksXL@Y.?4+Kfh[`^c^7\/?I6ZZ2<mP`YEVRDLn*6Kfa9ub>G/PYAdI+tXS@T`cRZ6IY_e'NdBdT0XHcRnL.HsaWU%']J.Ll)Ve'a>M+"99YM'HJ8(qTuW-8V:u,f$\>nl>Ej&d@C'8Ym<u!sOGuBoG--3uW0Ta9L2$jGS"^>3CG^@3?KfT2q<j_aT@J=K%'FHE]k[n&RJC!oKWd"N+n(%)V2Re`'6l:s9BJbITd!kKU*JhpO;roNuIST"n_^+%JL\gaF4J:n.Bl)FVS"^<m*7qpMo+f!bkP_=L%?)7Xbq=!Q6;OfF%FHZ[<M?aj-Tim]?VC9@X)E2O#X6TjoU1eR13b5\KA;/V.2Pl\MjNb'CT2qfW\N3L7qNtXAjDGPch2jplWT#5=%lqXV13S)dT2M]Anr)+qka)]R,:+I>p%\gI68@<.gYqVHMdXK=h3'>3J2ZtXXqmUq30*>)`JY0p7i+H0I!0qn*oMImh9`S)6ju<RC%8Q0>MW`9=(f*:spPBK5hV-/JVM[BoL_Nc0R0#+c->h9bcF-S<\E!9)UR]oMBL<U0<F2B<R&[WYf7S;/%0eS#UOr4Fa!NojP7hY(E%#-[OE7#![766HVAg@o\oY7^OJ2YR<V^)Z'JP&N77RiGN'2P?m'cbXD&U'X1Zc0RQ*0ECM$JGXo8.KXd1EDP,N0n2P/=3pgn1fi"W%C2Qn2,IWT3@<"M3_mt$#>m:D>J^AL>Y3&?5SSl^j-OhV_5W3Ig\D`aJ:$(Z\?@at-DU&tC0.TLdQIA/^%0o:/bIO>j.^k)VrG6Jo%/DcSHi$4\NUZGr'2E1-%_cnk>g4]S?Sue06R6ufTnucHmMQ^H/8"Sqc/J-9gU7K4^0Dm41_3%>/RG8MZp_l&/nE.BsWrTjVK%jg%%2c1JO2`XgE<fZaJROBR5!Ai?q<m[iFcFieI<]5/4LPEW\O,>8>oj/:5;#o('()QYWfe@]pa9_@e&W_n!KPmM@Ci1f?;_m+kC?LcY%RAI8grA7:roIt:P;A;K"=p\'=J]fU8f*413IaXQr/;?.%pfU$NMQ"B94?$>G2<M+KZ`OPX/";mKmpK&\<EmW<&<$IHcZ?>b=X62b%RG4?1</.F=LdZ*J,2H=VAj*!#YdM#$9A2OM!39X&nn->I*i-,50MO`hRXVqkqO,?`I_718bO!pJDD0+%RqWNfX48J`#.5>=?)L^W%,aWGHWQB1_N,AOYFf"*&//N0E]]\qHG1iV+9RZIFHF7-2CV(@@)u+BM9Na*tJ6\I7LDA4H,>cDomdNc%[^Z'8)^#$gpl\K]U7=\(%hm0-<A>`[>5uqi>DV)2A%B:@g*,g-3Bo??DM&.nXa)jcCDSfh0e9X.\*cp7tX#6M$M`V!Uq..&U.E-b7Vo5Je#8#30`h(&n;n:BQ%@H<9`HoCM2ft;F)48aL#nC+T$T3kt)3ZS/]]m]]sp[I\Ln`f\dg[Up-l0[p'rV5c%IscNerA]7rr_<E6s7CJ\s*/rRh7s!gqONj-%V#L2-_q3dp\bdI&Gr%>~>%AI9_PrivateDataEnd